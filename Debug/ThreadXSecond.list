
ThreadXSecond.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  0000606c  2**0
                  CONTENTS
  4 .ARM          00000008  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004708  08004708  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004708  08004708  00005708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800470c  0800470c  0000570c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004710  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  2000006c  0800477c  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  0800477c  00006640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014634  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db0  00000000  00000000  0001a6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001e480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b59  00000000  00000000  0001f410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a333  00000000  00000000  0001ff69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ab1  00000000  00000000  0003a29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096920  00000000  00000000  00051d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e866d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e80  00000000  00000000  000e86b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ea  00000000  00000000  000ec530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004680 	.word	0x08004680

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08004680 	.word	0x08004680

080001e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80001e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001e2:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001e6:	4919      	ldr	r1, [pc, #100]	@ (800024c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80001e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80001ec:	4818      	ldr	r0, [pc, #96]	@ (8000250 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80001ee:	4917      	ldr	r1, [pc, #92]	@ (800024c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80001f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80001f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80001f4:	4817      	ldr	r0, [pc, #92]	@ (8000254 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80001f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80001f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80001fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80001fe:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000202:	4915      	ldr	r1, [pc, #84]	@ (8000258 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000204:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000206:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800020a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800020c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000210:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000214:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000218:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800021c:	490f      	ldr	r1, [pc, #60]	@ (800025c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800021e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000222:	4770      	bx	lr

08000224 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000224:	f7ff bffe 	b.w	8000224 <__tx_BadHandler>

08000228 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000228:	f7ff bffe 	b.w	8000228 <__tx_HardfaultHandler>

0800022c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800022c:	f7ff bffe 	b.w	800022c <__tx_SVCallHandler>

08000230 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000230:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000232:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000236:	4770      	bx	lr

08000238 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000238:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800023a:	f000 f891 	bl	8000360 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800023e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000242:	4770      	bx	lr

08000244 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000244:	f7ff bffe 	b.w	8000244 <__tx_NMIHandler>

08000248 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000248:	f7ff bffe 	b.w	8000248 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000250:	20000ee8 	.word	0x20000ee8
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000258:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	40ff0000 	.word	0x40ff0000

08000260 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000260:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000264:	4a2a      	ldr	r2, [pc, #168]	@ (8000310 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000266:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000268:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800026c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000270:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000274:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000276:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800027a:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800027e:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 8000282:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000286:	f3bf 8f6f 	isb	sy

0800028a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800028a:	e7fe      	b.n	800028a <__tx_wait_here>

0800028c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800028c:	4821      	ldr	r0, [pc, #132]	@ (8000314 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800028e:	4a22      	ldr	r2, [pc, #136]	@ (8000318 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000290:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000294:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000296:	b191      	cbz	r1, 80002be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000298:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800029a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800029e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002a6:	d101      	bne.n	80002ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ac:	4c1b      	ldr	r4, [pc, #108]	@ (800031c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002b8:	b10d      	cbz	r5, 80002be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002bc:	6023      	str	r3, [r4, #0]

080002be <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80002be:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80002c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80002c2:	b1b1      	cbz	r1, 80002f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80002c4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80002c6:	b662      	cpsie	i

080002c8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80002c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ca:	4c14      	ldr	r4, [pc, #80]	@ (800031c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80002cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80002ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80002d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80002d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80002d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80002da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80002e2:	d101      	bne.n	80002e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80002e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080002e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80002e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80002ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80002f0:	4770      	bx	lr

080002f2 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 80002f2:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80002f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80002f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80002f8:	b909      	cbnz	r1, 80002fe <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 80002fa:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 80002fc:	e7f9      	b.n	80002f2 <__tx_ts_wait>

080002fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80002fe:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000302:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000306:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800030a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800030c:	e7dc      	b.n	80002c8 <__tx_ts_restore>

0800030e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800030e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000310:	20000f84 	.word	0x20000f84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000314:	20000eec 	.word	0x20000eec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000318:	20000ef0 	.word	0x20000ef0
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800031c:	200014f0 	.word	0x200014f0

08000320 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000320:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000322:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000326:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800032a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800032e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000330:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000334:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000336:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000338:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800033a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800033c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800033e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000340:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000342:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000344:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000346:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000348:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800034a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800034c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800034e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000352:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000354:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000356:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800035a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800035c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800035e:	4770      	bx	lr

08000360 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000360:	4922      	ldr	r1, [pc, #136]	@ (80003ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000362:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000364:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000368:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800036a:	4b21      	ldr	r3, [pc, #132]	@ (80003f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800036c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800036e:	b13a      	cbz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000370:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000374:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000376:	b91a      	cbnz	r2, 8000380 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000378:	4b1e      	ldr	r3, [pc, #120]	@ (80003f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800037a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800037e:	6018      	str	r0, [r3, #0]

08000380 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000380:	491d      	ldr	r1, [pc, #116]	@ (80003f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000382:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000384:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000386:	b122      	cbz	r2, 8000392 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000388:	4b1c      	ldr	r3, [pc, #112]	@ (80003fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800038a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800038e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000390:	e008      	b.n	80003a4 <__tx_timer_done>

08000392 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000392:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000398:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800039a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800039c:	d101      	bne.n	80003a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800039e:	4b19      	ldr	r3, [pc, #100]	@ (8000404 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003a0:	6818      	ldr	r0, [r3, #0]

080003a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003a2:	6008      	str	r0, [r1, #0]

080003a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003a4:	4b13      	ldr	r3, [pc, #76]	@ (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003a8:	b912      	cbnz	r2, 80003b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003aa:	4914      	ldr	r1, [pc, #80]	@ (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ae:	b1d0      	cbz	r0, 80003e6 <__tx_timer_nothing_expired>

080003b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003b4:	4911      	ldr	r1, [pc, #68]	@ (80003fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003b8:	b108      	cbz	r0, 80003be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003ba:	f003 f8ed 	bl	8003598 <_tx_timer_expiration_process>

080003be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003be:	4b0d      	ldr	r3, [pc, #52]	@ (80003f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80003c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80003c2:	b172      	cbz	r2, 80003e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80003c4:	f003 f85a 	bl	800347c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003c8:	480f      	ldr	r0, [pc, #60]	@ (8000408 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80003ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80003cc:	b949      	cbnz	r1, 80003e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003ce:	480f      	ldr	r0, [pc, #60]	@ (800040c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80003d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003d2:	4a0f      	ldr	r2, [pc, #60]	@ (8000410 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80003d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80003d6:	480f      	ldr	r0, [pc, #60]	@ (8000414 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80003d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80003dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80003de:	d000      	beq.n	80003e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80003e0:	6002      	str	r2, [r0, #0]

080003e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80003e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080003e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80003e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80003ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003ec:	20000f90 	.word	0x20000f90
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003f0:	200014f0 	.word	0x200014f0
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003f4:	20000f94 	.word	0x20000f94
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003f8:	20001020 	.word	0x20001020
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003fc:	20001024 	.word	0x20001024
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000400:	2000101c 	.word	0x2000101c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000404:	20001018 	.word	0x20001018
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	20000f84 	.word	0x20000f84
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040c:	20000eec 	.word	0x20000eec
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000410:	20000ef0 	.word	0x20000ef0
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000414:	e000ed04 	.word	0xe000ed04

08000418 <__aeabi_uldivmod>:
 8000418:	b953      	cbnz	r3, 8000430 <__aeabi_uldivmod+0x18>
 800041a:	b94a      	cbnz	r2, 8000430 <__aeabi_uldivmod+0x18>
 800041c:	2900      	cmp	r1, #0
 800041e:	bf08      	it	eq
 8000420:	2800      	cmpeq	r0, #0
 8000422:	bf1c      	itt	ne
 8000424:	f04f 31ff 	movne.w	r1, #4294967295
 8000428:	f04f 30ff 	movne.w	r0, #4294967295
 800042c:	f000 b96a 	b.w	8000704 <__aeabi_idiv0>
 8000430:	f1ad 0c08 	sub.w	ip, sp, #8
 8000434:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000438:	f000 f806 	bl	8000448 <__udivmoddi4>
 800043c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000444:	b004      	add	sp, #16
 8000446:	4770      	bx	lr

08000448 <__udivmoddi4>:
 8000448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800044c:	9d08      	ldr	r5, [sp, #32]
 800044e:	460c      	mov	r4, r1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d14e      	bne.n	80004f2 <__udivmoddi4+0xaa>
 8000454:	4694      	mov	ip, r2
 8000456:	458c      	cmp	ip, r1
 8000458:	4686      	mov	lr, r0
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	d962      	bls.n	8000526 <__udivmoddi4+0xde>
 8000460:	b14a      	cbz	r2, 8000476 <__udivmoddi4+0x2e>
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	4091      	lsls	r1, r2
 8000468:	fa20 f303 	lsr.w	r3, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	4319      	orrs	r1, r3
 8000472:	fa00 fe02 	lsl.w	lr, r0, r2
 8000476:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800047a:	fa1f f68c 	uxth.w	r6, ip
 800047e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000482:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000486:	fb07 1114 	mls	r1, r7, r4, r1
 800048a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048e:	fb04 f106 	mul.w	r1, r4, r6
 8000492:	4299      	cmp	r1, r3
 8000494:	d90a      	bls.n	80004ac <__udivmoddi4+0x64>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f104 30ff 	add.w	r0, r4, #4294967295
 800049e:	f080 8112 	bcs.w	80006c6 <__udivmoddi4+0x27e>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 810f 	bls.w	80006c6 <__udivmoddi4+0x27e>
 80004a8:	3c02      	subs	r4, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a59      	subs	r1, r3, r1
 80004ae:	fa1f f38e 	uxth.w	r3, lr
 80004b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b6:	fb07 1110 	mls	r1, r7, r0, r1
 80004ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004be:	fb00 f606 	mul.w	r6, r0, r6
 80004c2:	429e      	cmp	r6, r3
 80004c4:	d90a      	bls.n	80004dc <__udivmoddi4+0x94>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80004ce:	f080 80fc 	bcs.w	80006ca <__udivmoddi4+0x282>
 80004d2:	429e      	cmp	r6, r3
 80004d4:	f240 80f9 	bls.w	80006ca <__udivmoddi4+0x282>
 80004d8:	4463      	add	r3, ip
 80004da:	3802      	subs	r0, #2
 80004dc:	1b9b      	subs	r3, r3, r6
 80004de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004e2:	2100      	movs	r1, #0
 80004e4:	b11d      	cbz	r5, 80004ee <__udivmoddi4+0xa6>
 80004e6:	40d3      	lsrs	r3, r2
 80004e8:	2200      	movs	r2, #0
 80004ea:	e9c5 3200 	strd	r3, r2, [r5]
 80004ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d905      	bls.n	8000502 <__udivmoddi4+0xba>
 80004f6:	b10d      	cbz	r5, 80004fc <__udivmoddi4+0xb4>
 80004f8:	e9c5 0100 	strd	r0, r1, [r5]
 80004fc:	2100      	movs	r1, #0
 80004fe:	4608      	mov	r0, r1
 8000500:	e7f5      	b.n	80004ee <__udivmoddi4+0xa6>
 8000502:	fab3 f183 	clz	r1, r3
 8000506:	2900      	cmp	r1, #0
 8000508:	d146      	bne.n	8000598 <__udivmoddi4+0x150>
 800050a:	42a3      	cmp	r3, r4
 800050c:	d302      	bcc.n	8000514 <__udivmoddi4+0xcc>
 800050e:	4290      	cmp	r0, r2
 8000510:	f0c0 80f0 	bcc.w	80006f4 <__udivmoddi4+0x2ac>
 8000514:	1a86      	subs	r6, r0, r2
 8000516:	eb64 0303 	sbc.w	r3, r4, r3
 800051a:	2001      	movs	r0, #1
 800051c:	2d00      	cmp	r5, #0
 800051e:	d0e6      	beq.n	80004ee <__udivmoddi4+0xa6>
 8000520:	e9c5 6300 	strd	r6, r3, [r5]
 8000524:	e7e3      	b.n	80004ee <__udivmoddi4+0xa6>
 8000526:	2a00      	cmp	r2, #0
 8000528:	f040 8090 	bne.w	800064c <__udivmoddi4+0x204>
 800052c:	eba1 040c 	sub.w	r4, r1, ip
 8000530:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000534:	fa1f f78c 	uxth.w	r7, ip
 8000538:	2101      	movs	r1, #1
 800053a:	fbb4 f6f8 	udiv	r6, r4, r8
 800053e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000542:	fb08 4416 	mls	r4, r8, r6, r4
 8000546:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800054a:	fb07 f006 	mul.w	r0, r7, r6
 800054e:	4298      	cmp	r0, r3
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x11c>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f106 34ff 	add.w	r4, r6, #4294967295
 800055a:	d202      	bcs.n	8000562 <__udivmoddi4+0x11a>
 800055c:	4298      	cmp	r0, r3
 800055e:	f200 80cd 	bhi.w	80006fc <__udivmoddi4+0x2b4>
 8000562:	4626      	mov	r6, r4
 8000564:	1a1c      	subs	r4, r3, r0
 8000566:	fa1f f38e 	uxth.w	r3, lr
 800056a:	fbb4 f0f8 	udiv	r0, r4, r8
 800056e:	fb08 4410 	mls	r4, r8, r0, r4
 8000572:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000576:	fb00 f707 	mul.w	r7, r0, r7
 800057a:	429f      	cmp	r7, r3
 800057c:	d908      	bls.n	8000590 <__udivmoddi4+0x148>
 800057e:	eb1c 0303 	adds.w	r3, ip, r3
 8000582:	f100 34ff 	add.w	r4, r0, #4294967295
 8000586:	d202      	bcs.n	800058e <__udivmoddi4+0x146>
 8000588:	429f      	cmp	r7, r3
 800058a:	f200 80b0 	bhi.w	80006ee <__udivmoddi4+0x2a6>
 800058e:	4620      	mov	r0, r4
 8000590:	1bdb      	subs	r3, r3, r7
 8000592:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000596:	e7a5      	b.n	80004e4 <__udivmoddi4+0x9c>
 8000598:	f1c1 0620 	rsb	r6, r1, #32
 800059c:	408b      	lsls	r3, r1
 800059e:	fa22 f706 	lsr.w	r7, r2, r6
 80005a2:	431f      	orrs	r7, r3
 80005a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80005a8:	fa04 f301 	lsl.w	r3, r4, r1
 80005ac:	ea43 030c 	orr.w	r3, r3, ip
 80005b0:	40f4      	lsrs	r4, r6
 80005b2:	fa00 f801 	lsl.w	r8, r0, r1
 80005b6:	0c38      	lsrs	r0, r7, #16
 80005b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005bc:	fbb4 fef0 	udiv	lr, r4, r0
 80005c0:	fa1f fc87 	uxth.w	ip, r7
 80005c4:	fb00 441e 	mls	r4, r0, lr, r4
 80005c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005cc:	fb0e f90c 	mul.w	r9, lr, ip
 80005d0:	45a1      	cmp	r9, r4
 80005d2:	fa02 f201 	lsl.w	r2, r2, r1
 80005d6:	d90a      	bls.n	80005ee <__udivmoddi4+0x1a6>
 80005d8:	193c      	adds	r4, r7, r4
 80005da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80005de:	f080 8084 	bcs.w	80006ea <__udivmoddi4+0x2a2>
 80005e2:	45a1      	cmp	r9, r4
 80005e4:	f240 8081 	bls.w	80006ea <__udivmoddi4+0x2a2>
 80005e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80005ec:	443c      	add	r4, r7
 80005ee:	eba4 0409 	sub.w	r4, r4, r9
 80005f2:	fa1f f983 	uxth.w	r9, r3
 80005f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80005fa:	fb00 4413 	mls	r4, r0, r3, r4
 80005fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000602:	fb03 fc0c 	mul.w	ip, r3, ip
 8000606:	45a4      	cmp	ip, r4
 8000608:	d907      	bls.n	800061a <__udivmoddi4+0x1d2>
 800060a:	193c      	adds	r4, r7, r4
 800060c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000610:	d267      	bcs.n	80006e2 <__udivmoddi4+0x29a>
 8000612:	45a4      	cmp	ip, r4
 8000614:	d965      	bls.n	80006e2 <__udivmoddi4+0x29a>
 8000616:	3b02      	subs	r3, #2
 8000618:	443c      	add	r4, r7
 800061a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800061e:	fba0 9302 	umull	r9, r3, r0, r2
 8000622:	eba4 040c 	sub.w	r4, r4, ip
 8000626:	429c      	cmp	r4, r3
 8000628:	46ce      	mov	lr, r9
 800062a:	469c      	mov	ip, r3
 800062c:	d351      	bcc.n	80006d2 <__udivmoddi4+0x28a>
 800062e:	d04e      	beq.n	80006ce <__udivmoddi4+0x286>
 8000630:	b155      	cbz	r5, 8000648 <__udivmoddi4+0x200>
 8000632:	ebb8 030e 	subs.w	r3, r8, lr
 8000636:	eb64 040c 	sbc.w	r4, r4, ip
 800063a:	fa04 f606 	lsl.w	r6, r4, r6
 800063e:	40cb      	lsrs	r3, r1
 8000640:	431e      	orrs	r6, r3
 8000642:	40cc      	lsrs	r4, r1
 8000644:	e9c5 6400 	strd	r6, r4, [r5]
 8000648:	2100      	movs	r1, #0
 800064a:	e750      	b.n	80004ee <__udivmoddi4+0xa6>
 800064c:	f1c2 0320 	rsb	r3, r2, #32
 8000650:	fa20 f103 	lsr.w	r1, r0, r3
 8000654:	fa0c fc02 	lsl.w	ip, ip, r2
 8000658:	fa24 f303 	lsr.w	r3, r4, r3
 800065c:	4094      	lsls	r4, r2
 800065e:	430c      	orrs	r4, r1
 8000660:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000664:	fa00 fe02 	lsl.w	lr, r0, r2
 8000668:	fa1f f78c 	uxth.w	r7, ip
 800066c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000670:	fb08 3110 	mls	r1, r8, r0, r3
 8000674:	0c23      	lsrs	r3, r4, #16
 8000676:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800067a:	fb00 f107 	mul.w	r1, r0, r7
 800067e:	4299      	cmp	r1, r3
 8000680:	d908      	bls.n	8000694 <__udivmoddi4+0x24c>
 8000682:	eb1c 0303 	adds.w	r3, ip, r3
 8000686:	f100 36ff 	add.w	r6, r0, #4294967295
 800068a:	d22c      	bcs.n	80006e6 <__udivmoddi4+0x29e>
 800068c:	4299      	cmp	r1, r3
 800068e:	d92a      	bls.n	80006e6 <__udivmoddi4+0x29e>
 8000690:	3802      	subs	r0, #2
 8000692:	4463      	add	r3, ip
 8000694:	1a5b      	subs	r3, r3, r1
 8000696:	b2a4      	uxth	r4, r4
 8000698:	fbb3 f1f8 	udiv	r1, r3, r8
 800069c:	fb08 3311 	mls	r3, r8, r1, r3
 80006a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006a4:	fb01 f307 	mul.w	r3, r1, r7
 80006a8:	42a3      	cmp	r3, r4
 80006aa:	d908      	bls.n	80006be <__udivmoddi4+0x276>
 80006ac:	eb1c 0404 	adds.w	r4, ip, r4
 80006b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80006b4:	d213      	bcs.n	80006de <__udivmoddi4+0x296>
 80006b6:	42a3      	cmp	r3, r4
 80006b8:	d911      	bls.n	80006de <__udivmoddi4+0x296>
 80006ba:	3902      	subs	r1, #2
 80006bc:	4464      	add	r4, ip
 80006be:	1ae4      	subs	r4, r4, r3
 80006c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006c4:	e739      	b.n	800053a <__udivmoddi4+0xf2>
 80006c6:	4604      	mov	r4, r0
 80006c8:	e6f0      	b.n	80004ac <__udivmoddi4+0x64>
 80006ca:	4608      	mov	r0, r1
 80006cc:	e706      	b.n	80004dc <__udivmoddi4+0x94>
 80006ce:	45c8      	cmp	r8, r9
 80006d0:	d2ae      	bcs.n	8000630 <__udivmoddi4+0x1e8>
 80006d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80006d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80006da:	3801      	subs	r0, #1
 80006dc:	e7a8      	b.n	8000630 <__udivmoddi4+0x1e8>
 80006de:	4631      	mov	r1, r6
 80006e0:	e7ed      	b.n	80006be <__udivmoddi4+0x276>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e799      	b.n	800061a <__udivmoddi4+0x1d2>
 80006e6:	4630      	mov	r0, r6
 80006e8:	e7d4      	b.n	8000694 <__udivmoddi4+0x24c>
 80006ea:	46d6      	mov	lr, sl
 80006ec:	e77f      	b.n	80005ee <__udivmoddi4+0x1a6>
 80006ee:	4463      	add	r3, ip
 80006f0:	3802      	subs	r0, #2
 80006f2:	e74d      	b.n	8000590 <__udivmoddi4+0x148>
 80006f4:	4606      	mov	r6, r0
 80006f6:	4623      	mov	r3, r4
 80006f8:	4608      	mov	r0, r1
 80006fa:	e70f      	b.n	800051c <__udivmoddi4+0xd4>
 80006fc:	3e02      	subs	r6, #2
 80006fe:	4463      	add	r3, ip
 8000700:	e730      	b.n	8000564 <__udivmoddi4+0x11c>
 8000702:	bf00      	nop

08000704 <__aeabi_idiv0>:
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
 800070e:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000710:	2334      	movs	r3, #52	@ 0x34
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000718:	4a08      	ldr	r2, [pc, #32]	@ (800073c <tx_application_define+0x34>)
 800071a:	4909      	ldr	r1, [pc, #36]	@ (8000740 <tx_application_define+0x38>)
 800071c:	4809      	ldr	r0, [pc, #36]	@ (8000744 <tx_application_define+0x3c>)
 800071e:	f003 f971 	bl	8003a04 <_txe_byte_pool_create>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d104      	bne.n	8000732 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <tx_application_define+0x3c>)
 800072a:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f000 f80b 	bl	8000748 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

}
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000088 	.word	0x20000088
 8000740:	08004698 	.word	0x08004698
 8000744:	20000488 	.word	0x20000488

08000748 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	@ 0x30
 800074c:	af08      	add	r7, sp, #32
 800074e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  tx_thread_create(&thread_ptr, "my_thread", my_thread_entry, 0x1234, thread_stack, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8000758:	23b0      	movs	r3, #176	@ 0xb0
 800075a:	9306      	str	r3, [sp, #24]
 800075c:	2301      	movs	r3, #1
 800075e:	9305      	str	r3, [sp, #20]
 8000760:	2301      	movs	r3, #1
 8000762:	9304      	str	r3, [sp, #16]
 8000764:	230f      	movs	r3, #15
 8000766:	9303      	str	r3, [sp, #12]
 8000768:	230f      	movs	r3, #15
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <App_ThreadX_Init+0x74>)
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	f241 2334 	movw	r3, #4660	@ 0x1234
 800077a:	4a11      	ldr	r2, [pc, #68]	@ (80007c0 <App_ThreadX_Init+0x78>)
 800077c:	4911      	ldr	r1, [pc, #68]	@ (80007c4 <App_ThreadX_Init+0x7c>)
 800077e:	4812      	ldr	r0, [pc, #72]	@ (80007c8 <App_ThreadX_Init+0x80>)
 8000780:	f003 f9e0 	bl	8003b44 <_txe_thread_create>
  tx_thread_create(&last_thread_ptr, "last_thread", last_thread_entry, 0x1235, last_thread_stack, THREAD_STACK_SIZE, 10, 10, 1, TX_AUTO_START);
 8000784:	23b0      	movs	r3, #176	@ 0xb0
 8000786:	9306      	str	r3, [sp, #24]
 8000788:	2301      	movs	r3, #1
 800078a:	9305      	str	r3, [sp, #20]
 800078c:	2301      	movs	r3, #1
 800078e:	9304      	str	r3, [sp, #16]
 8000790:	230a      	movs	r3, #10
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	230a      	movs	r3, #10
 8000796:	9302      	str	r3, [sp, #8]
 8000798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079c:	9301      	str	r3, [sp, #4]
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <App_ThreadX_Init+0x84>)
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	f241 2335 	movw	r3, #4661	@ 0x1235
 80007a6:	4a0a      	ldr	r2, [pc, #40]	@ (80007d0 <App_ThreadX_Init+0x88>)
 80007a8:	490a      	ldr	r1, [pc, #40]	@ (80007d4 <App_ThreadX_Init+0x8c>)
 80007aa:	480b      	ldr	r0, [pc, #44]	@ (80007d8 <App_ThreadX_Init+0x90>)
 80007ac:	f003 f9ca 	bl	8003b44 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80007b0:	68fb      	ldr	r3, [r7, #12]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200004bc 	.word	0x200004bc
 80007c0:	080007e9 	.word	0x080007e9
 80007c4:	080046ac 	.word	0x080046ac
 80007c8:	20000cbc 	.word	0x20000cbc
 80007cc:	200008bc 	.word	0x200008bc
 80007d0:	08000815 	.word	0x08000815
 80007d4:	080046b8 	.word	0x080046b8
 80007d8:	20000d6c 	.word	0x20000d6c

080007dc <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80007e0:	f002 f9d2 	bl	8002b88 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <my_thread_entry>:

/* USER CODE BEGIN 1 */
void my_thread_entry(ULONG initial_input){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007f4:	4805      	ldr	r0, [pc, #20]	@ (800080c <my_thread_entry+0x24>)
 80007f6:	f000 fdc8 	bl	800138a <HAL_GPIO_TogglePin>
		printf("Task1\r\n");
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <my_thread_entry+0x28>)
 80007fc:	f003 fbac 	bl	8003f58 <puts>
		tx_thread_sleep(100);
 8000800:	2064      	movs	r0, #100	@ 0x64
 8000802:	f002 fb69 	bl	8002ed8 <_tx_thread_sleep>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000806:	bf00      	nop
 8000808:	e7f2      	b.n	80007f0 <my_thread_entry+0x8>
 800080a:	bf00      	nop
 800080c:	40020800 	.word	0x40020800
 8000810:	080046c4 	.word	0x080046c4

08000814 <last_thread_entry>:
	}
}

void last_thread_entry(ULONG initial_input){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
	while(1){
		printf("Task2\r\n");
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <last_thread_entry+0x18>)
 800081e:	f003 fb9b 	bl	8003f58 <puts>
		tx_thread_sleep(100);
 8000822:	2064      	movs	r0, #100	@ 0x64
 8000824:	f002 fb58 	bl	8002ed8 <_tx_thread_sleep>
		printf("Task2\r\n");
 8000828:	bf00      	nop
 800082a:	e7f7      	b.n	800081c <last_thread_entry+0x8>
 800082c:	080046cc 	.word	0x080046cc

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000834:	f000 fae8 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000838:	f000 f808 	bl	800084c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083c:	f000 f88e 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000840:	f000 f862 	bl	8000908 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000844:	f7ff ffca 	bl	80007dc <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <main+0x18>

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b094      	sub	sp, #80	@ 0x50
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	2230      	movs	r2, #48	@ 0x30
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fc5c 	bl	8004118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
 800086e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	4b22      	ldr	r3, [pc, #136]	@ (8000900 <SystemClock_Config+0xb4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xb4>)
 800087a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800087e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000880:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xb4>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <SystemClock_Config+0xb8>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a1b      	ldr	r2, [pc, #108]	@ (8000904 <SystemClock_Config+0xb8>)
 8000896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800089a:	6013      	str	r3, [r2, #0]
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <SystemClock_Config+0xb8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fd7f 	bl	80013c0 <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008c8:	f000 f8b0 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 ffe2 	bl	80018b0 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008f2:	f000 f89b 	bl	8000a2c <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f001 fc3c 	bl	80021bc <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 f86f 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000e1c 	.word	0x20000e1c
 8000958:	40004400 	.word	0x40004400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_GPIO_Init+0x80>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <MX_GPIO_Init+0x80>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b16      	ldr	r3, [pc, #88]	@ (80009dc <MX_GPIO_Init+0x80>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_GPIO_Init+0x80>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a11      	ldr	r2, [pc, #68]	@ (80009dc <MX_GPIO_Init+0x80>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_GPIO_Init+0x80>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009b0:	480b      	ldr	r0, [pc, #44]	@ (80009e0 <MX_GPIO_Init+0x84>)
 80009b2:	f000 fcd1 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80009b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_GPIO_Init+0x84>)
 80009d0:	f000 fb3e 	bl	8001050 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d4:	bf00      	nop
 80009d6:	3720      	adds	r7, #32
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020800 	.word	0x40020800

080009e4 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80009ec:	1d39      	adds	r1, r7, #4
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2201      	movs	r2, #1
 80009f4:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <__io_putchar+0x20>)
 80009f6:	f001 fc31 	bl	800225c <HAL_UART_Transmit>
    return ch;
 80009fa:	687b      	ldr	r3, [r7, #4]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000e1c 	.word	0x20000e1c

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 fa17 	bl	8000e4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40014000 	.word	0x40014000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b10      	ldr	r3, [pc, #64]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a08      	ldr	r2, [pc, #32]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_MspInit+0x4c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	40023800 	.word	0x40023800

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	@ (8000b0c <HAL_UART_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12b      	bne.n	8000b02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a17      	ldr	r2, [pc, #92]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <HAL_UART_MspInit+0x8c>)
 8000afe:	f000 faa7 	bl	8001050 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	@ 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b30:	4a2d      	ldr	r2, [pc, #180]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b36:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b38:	4b2b      	ldr	r3, [pc, #172]	@ (8000be8 <HAL_InitTick+0xd0>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 f88e 	bl	8001c70 <HAL_RCC_GetClockConfig>
  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b54:	f001 f878 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8000b58:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b5c:	4a23      	ldr	r2, [pc, #140]	@ (8000bec <HAL_InitTick+0xd4>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	@ (8000bf4 <HAL_InitTick+0xdc>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b70:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000b8e:	4818      	ldr	r0, [pc, #96]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000b90:	f001 f8a0 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000ba2:	4813      	ldr	r0, [pc, #76]	@ (8000bf0 <HAL_InitTick+0xd8>)
 8000ba4:	f001 f8f0 	bl	8001d88 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000bb6:	2018      	movs	r0, #24
 8000bb8:	f000 fa3c 	bl	8001034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	2018      	movs	r0, #24
 8000bc8:	f000 fa18 	bl	8000ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <HAL_InitTick+0xe0>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3730      	adds	r7, #48	@ 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000e64 	.word	0x20000e64
 8000bf4:	40014000 	.word	0x40014000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <NMI_Handler+0x4>

08000c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <MemManage_Handler+0x4>

08000c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <BusFault_Handler+0x4>

08000c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <UsageFault_Handler+0x4>

08000c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000c38:	4802      	ldr	r0, [pc, #8]	@ (8000c44 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000c3a:	f001 f907 	bl	8001e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000e64 	.word	0x20000e64

08000c48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e00a      	b.n	8000c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5a:	f3af 8000 	nop.w
 8000c5e:	4601      	mov	r1, r0
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	60ba      	str	r2, [r7, #8]
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697a      	ldr	r2, [r7, #20]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	dbf0      	blt.n	8000c5a <_read+0x12>
  }

  return len;
 8000c78:	687b      	ldr	r3, [r7, #4]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	e009      	b.n	8000ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	60ba      	str	r2, [r7, #8]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff fea1 	bl	80009e4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf1      	blt.n	8000c94 <_write+0x12>
  }
  return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_close>:

int _close(int file)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <_isatty>:

int _isatty(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3714      	adds	r7, #20
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f003 fa2e 	bl	80041b4 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20020000 	.word	0x20020000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	20000eac 	.word	0x20000eac
 8000d8c:	20001640 	.word	0x20001640

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f003 f9ed 	bl	80041c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fd23 	bl	8000830 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000df8:	08004710 	.word	0x08004710
  ldr r2, =_sbss
 8000dfc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e00:	20001640 	.word	0x20001640

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8d8 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	200f      	movs	r0, #15
 8000e38:	f7ff fe6e 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdfc 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000eb0 	.word	0x20000eb0

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000eb0 	.word	0x20000eb0

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	e159      	b.n	8001320 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	429a      	cmp	r2, r3
 8001086:	f040 8148 	bne.w	800131a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
 8001092:	2b01      	cmp	r3, #1
 8001094:	d005      	beq.n	80010a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d130      	bne.n	8001104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010d8:	2201      	movs	r2, #1
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	f003 0201 	and.w	r2, r3, #1
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b03      	cmp	r3, #3
 800110e:	d017      	beq.n	8001140 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	2203      	movs	r2, #3
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d123      	bne.n	8001194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	f003 0307 	and.w	r3, r3, #7
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	220f      	movs	r2, #15
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	69b9      	ldr	r1, [r7, #24]
 8001190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	2203      	movs	r2, #3
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 0203 	and.w	r2, r3, #3
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 80a2 	beq.w	800131a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a56      	ldr	r2, [pc, #344]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b54      	ldr	r3, [pc, #336]	@ (8001338 <HAL_GPIO_Init+0x2e8>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011f2:	4a52      	ldr	r2, [pc, #328]	@ (800133c <HAL_GPIO_Init+0x2ec>)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	089b      	lsrs	r3, r3, #2
 80011f8:	3302      	adds	r3, #2
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a49      	ldr	r2, [pc, #292]	@ (8001340 <HAL_GPIO_Init+0x2f0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d019      	beq.n	8001252 <HAL_GPIO_Init+0x202>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a48      	ldr	r2, [pc, #288]	@ (8001344 <HAL_GPIO_Init+0x2f4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d013      	beq.n	800124e <HAL_GPIO_Init+0x1fe>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a47      	ldr	r2, [pc, #284]	@ (8001348 <HAL_GPIO_Init+0x2f8>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d00d      	beq.n	800124a <HAL_GPIO_Init+0x1fa>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a46      	ldr	r2, [pc, #280]	@ (800134c <HAL_GPIO_Init+0x2fc>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d007      	beq.n	8001246 <HAL_GPIO_Init+0x1f6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a45      	ldr	r2, [pc, #276]	@ (8001350 <HAL_GPIO_Init+0x300>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d101      	bne.n	8001242 <HAL_GPIO_Init+0x1f2>
 800123e:	2304      	movs	r3, #4
 8001240:	e008      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001242:	2307      	movs	r3, #7
 8001244:	e006      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001246:	2303      	movs	r3, #3
 8001248:	e004      	b.n	8001254 <HAL_GPIO_Init+0x204>
 800124a:	2302      	movs	r3, #2
 800124c:	e002      	b.n	8001254 <HAL_GPIO_Init+0x204>
 800124e:	2301      	movs	r3, #1
 8001250:	e000      	b.n	8001254 <HAL_GPIO_Init+0x204>
 8001252:	2300      	movs	r3, #0
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	f002 0203 	and.w	r2, r2, #3
 800125a:	0092      	lsls	r2, r2, #2
 800125c:	4093      	lsls	r3, r2
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001264:	4935      	ldr	r1, [pc, #212]	@ (800133c <HAL_GPIO_Init+0x2ec>)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001296:	4a2f      	ldr	r2, [pc, #188]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <HAL_GPIO_Init+0x304>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012c0:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012c6:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012f0:	4b18      	ldr	r3, [pc, #96]	@ (8001354 <HAL_GPIO_Init+0x304>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001314:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <HAL_GPIO_Init+0x304>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3301      	adds	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b0f      	cmp	r3, #15
 8001324:	f67f aea2 	bls.w	800106c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001328:	bf00      	nop
 800132a:	bf00      	nop
 800132c:	3724      	adds	r7, #36	@ 0x24
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40013800 	.word	0x40013800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40021000 	.word	0x40021000
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800138a:	b480      	push	{r7}
 800138c:	b085      	sub	sp, #20
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	041a      	lsls	r2, r3, #16
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43d9      	mvns	r1, r3
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	400b      	ands	r3, r1
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e267      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d075      	beq.n	80014ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013de:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d00c      	beq.n	8001404 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b85      	ldr	r3, [pc, #532]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d112      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013f6:	4b82      	ldr	r3, [pc, #520]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001402:	d10b      	bne.n	800141c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001404:	4b7e      	ldr	r3, [pc, #504]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d05b      	beq.n	80014c8 <HAL_RCC_OscConfig+0x108>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d157      	bne.n	80014c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e242      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d106      	bne.n	8001434 <HAL_RCC_OscConfig+0x74>
 8001426:	4b76      	ldr	r3, [pc, #472]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a75      	ldr	r2, [pc, #468]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800142c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e01d      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b70      	ldr	r3, [pc, #448]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6f      	ldr	r2, [pc, #444]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b6d      	ldr	r3, [pc, #436]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a6c      	ldr	r2, [pc, #432]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0xb0>
 8001458:	4b69      	ldr	r3, [pc, #420]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a68      	ldr	r2, [pc, #416]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001462:	6013      	str	r3, [r2, #0]
 8001464:	4b66      	ldr	r3, [pc, #408]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a65      	ldr	r2, [pc, #404]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800146e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d013      	beq.n	80014a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff fcfc 	bl	8000e74 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fcf8 	bl	8000e74 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	@ 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e207      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b5b      	ldr	r3, [pc, #364]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d0f0      	beq.n	8001480 <HAL_RCC_OscConfig+0xc0>
 800149e:	e014      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff fce8 	bl	8000e74 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a8:	f7ff fce4 	bl	8000e74 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	@ 0x64
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e1f3      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ba:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0xe8>
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d063      	beq.n	800159e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d11c      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	4b41      	ldr	r3, [pc, #260]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d005      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	68db      	ldr	r3, [r3, #12]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d001      	beq.n	8001512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e1c7      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b3b      	ldr	r3, [pc, #236]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4937      	ldr	r1, [pc, #220]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	e03a      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d020      	beq.n	8001572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001530:	4b34      	ldr	r3, [pc, #208]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff fc9d 	bl	8000e74 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153e:	f7ff fc99 	bl	8000e74 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e1a8      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001550:	4b2b      	ldr	r3, [pc, #172]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b28      	ldr	r3, [pc, #160]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	4925      	ldr	r1, [pc, #148]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 800156c:	4313      	orrs	r3, r2
 800156e:	600b      	str	r3, [r1, #0]
 8001570:	e015      	b.n	800159e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001572:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_RCC_OscConfig+0x244>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fc7c 	bl	8000e74 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001580:	f7ff fc78 	bl	8000e74 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e187      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001592:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d036      	beq.n	8001618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d016      	beq.n	80015e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b2:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fc5c 	bl	8000e74 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fc58 	bl	8000e74 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e167      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001600 <HAL_RCC_OscConfig+0x240>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x200>
 80015de:	e01b      	b.n	8001618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e0:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_OscConfig+0x248>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fc45 	bl	8000e74 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	e00e      	b.n	800160c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fc41 	bl	8000e74 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d907      	bls.n	800160c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e150      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001600:	40023800 	.word	0x40023800
 8001604:	42470000 	.word	0x42470000
 8001608:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800160e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1ea      	bne.n	80015ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8097 	beq.w	8001754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162a:	4b81      	ldr	r3, [pc, #516]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a7c      	ldr	r2, [pc, #496]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b7a      	ldr	r3, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001652:	2301      	movs	r3, #1
 8001654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001656:	4b77      	ldr	r3, [pc, #476]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001662:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a73      	ldr	r2, [pc, #460]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166e:	f7ff fc01 	bl	8000e74 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001676:	f7ff fbfd 	bl	8000e74 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e10c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <HAL_RCC_OscConfig+0x474>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d106      	bne.n	80016aa <HAL_RCC_OscConfig+0x2ea>
 800169c:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800169e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a0:	4a63      	ldr	r2, [pc, #396]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x30c>
 80016b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	4b5c      	ldr	r3, [pc, #368]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x324>
 80016cc:	4b58      	ldr	r3, [pc, #352]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a57      	ldr	r2, [pc, #348]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d8:	4b55      	ldr	r3, [pc, #340]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016dc:	4a54      	ldr	r2, [pc, #336]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d015      	beq.n	8001718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ec:	f7ff fbc2 	bl	8000e74 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f2:	e00a      	b.n	800170a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbbe 	bl	8000e74 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e0cb      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170a:	4b49      	ldr	r3, [pc, #292]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800170c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0ee      	beq.n	80016f4 <HAL_RCC_OscConfig+0x334>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff fbac 	bl	8000e74 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff fba8 	bl	8000e74 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e0b5      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001736:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ee      	bne.n	8001720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7dfb      	ldrb	r3, [r7, #23]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b39      	ldr	r3, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	4a38      	ldr	r2, [pc, #224]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 80a1 	beq.w	80018a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800175e:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f003 030c 	and.w	r3, r3, #12
 8001766:	2b08      	cmp	r3, #8
 8001768:	d05c      	beq.n	8001824 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d141      	bne.n	80017f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b31      	ldr	r3, [pc, #196]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb7c 	bl	8000e74 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fb78 	bl	8000e74 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e087      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b27      	ldr	r3, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69da      	ldr	r2, [r3, #28]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	019b      	lsls	r3, r3, #6
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	041b      	lsls	r3, r3, #16
 80017ba:	431a      	orrs	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	061b      	lsls	r3, r3, #24
 80017c2:	491b      	ldr	r1, [pc, #108]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fb51 	bl	8000e74 <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff fb4d 	bl	8000e74 <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e05c      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x416>
 80017f4:	e054      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <HAL_RCC_OscConfig+0x478>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff fb3a 	bl	8000e74 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001804:	f7ff fb36 	bl	8000e74 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e045      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_RCC_OscConfig+0x470>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
 8001822:	e03d      	b.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e038      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000
 8001838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x4ec>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d028      	beq.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d121      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d11a      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800186c:	4013      	ands	r3, r2
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d111      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001882:	085b      	lsrs	r3, r3, #1
 8001884:	3b01      	subs	r3, #1
 8001886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d107      	bne.n	800189c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3718      	adds	r7, #24
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cc      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b68      	ldr	r3, [pc, #416]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d90c      	bls.n	80018ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b65      	ldr	r3, [pc, #404]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b63      	ldr	r3, [pc, #396]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b8      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001904:	4b59      	ldr	r3, [pc, #356]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a58      	ldr	r2, [pc, #352]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800190e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191c:	4b53      	ldr	r3, [pc, #332]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b50      	ldr	r3, [pc, #320]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	494d      	ldr	r1, [pc, #308]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d044      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b47      	ldr	r3, [pc, #284]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d119      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e067      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4934      	ldr	r1, [pc, #208]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff fa68 	bl	8000e74 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff fa64 	bl	8000e74 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2b      	ldr	r3, [pc, #172]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b19      	ldr	r3, [pc, #100]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	490e      	ldr	r1, [pc, #56]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a36:	f000 f821 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	490a      	ldr	r1, [pc, #40]	@ (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	5ccb      	ldrb	r3, [r1, r3]
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f85e 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	080046e8 	.word	0x080046e8
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a80:	b090      	sub	sp, #64	@ 0x40
 8001a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a94:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d00d      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x40>
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	f200 80a1 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d003      	beq.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001aae:	e09b      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ab0:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ab2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ab4:	e09b      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ab6:	4b53      	ldr	r3, [pc, #332]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001aba:	e098      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001abc:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d028      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	099b      	lsrs	r3, r3, #6
 8001ad8:	2200      	movs	r2, #0
 8001ada:	623b      	str	r3, [r7, #32]
 8001adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4b47      	ldr	r3, [pc, #284]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ae8:	fb03 f201 	mul.w	r2, r3, r1
 8001aec:	2300      	movs	r3, #0
 8001aee:	fb00 f303 	mul.w	r3, r0, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x188>)
 8001af6:	fba0 1202 	umull	r1, r2, r0, r2
 8001afa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001afc:	460a      	mov	r2, r1
 8001afe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b02:	4413      	add	r3, r2
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	61fa      	str	r2, [r7, #28]
 8001b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b16:	f7fe fc7f 	bl	8000418 <__aeabi_uldivmod>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4613      	mov	r3, r2
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b22:	e053      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	099b      	lsrs	r3, r3, #6
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	617a      	str	r2, [r7, #20]
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b36:	f04f 0b00 	mov.w	fp, #0
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	465b      	mov	r3, fp
 8001b3e:	f04f 0000 	mov.w	r0, #0
 8001b42:	f04f 0100 	mov.w	r1, #0
 8001b46:	0159      	lsls	r1, r3, #5
 8001b48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b4c:	0150      	lsls	r0, r2, #5
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	ebb2 080a 	subs.w	r8, r2, sl
 8001b56:	eb63 090b 	sbc.w	r9, r3, fp
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001b66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001b6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001b6e:	ebb2 0408 	subs.w	r4, r2, r8
 8001b72:	eb63 0509 	sbc.w	r5, r3, r9
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	00eb      	lsls	r3, r5, #3
 8001b80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b84:	00e2      	lsls	r2, r4, #3
 8001b86:	4614      	mov	r4, r2
 8001b88:	461d      	mov	r5, r3
 8001b8a:	eb14 030a 	adds.w	r3, r4, sl
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	eb45 030b 	adc.w	r3, r5, fp
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	028b      	lsls	r3, r1, #10
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bac:	4621      	mov	r1, r4
 8001bae:	028a      	lsls	r2, r1, #10
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	60fa      	str	r2, [r7, #12]
 8001bbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bc0:	f7fe fc2a 	bl	8000418 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x180>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001bdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3740      	adds	r7, #64	@ 0x40
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	00f42400 	.word	0x00f42400
 8001c04:	017d7840 	.word	0x017d7840

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	@ (8001c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	20000000 	.word	0x20000000

08001c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c24:	f7ff fff0 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b05      	ldr	r3, [pc, #20]	@ (8001c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	0a9b      	lsrs	r3, r3, #10
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	4903      	ldr	r1, [pc, #12]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	080046f8 	.word	0x080046f8

08001c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c4c:	f7ff ffdc 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c50:	4602      	mov	r2, r0
 8001c52:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	4903      	ldr	r1, [pc, #12]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5e:	5ccb      	ldrb	r3, [r1, r3]
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080046f8 	.word	0x080046f8

08001c70 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 0203 	and.w	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c98:	4b0c      	ldr	r3, [pc, #48]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <HAL_RCC_GetClockConfig+0x5c>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	08db      	lsrs	r3, r3, #3
 8001caa:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cb2:	4b07      	ldr	r3, [pc, #28]	@ (8001cd0 <HAL_RCC_GetClockConfig+0x60>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0207 	and.w	r2, r3, #7
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	601a      	str	r2, [r3, #0]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40023c00 	.word	0x40023c00

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f839 	bl	8001d72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 f9b2 	bl	800207c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e044      	b.n	8001e2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8001e38 <HAL_TIM_Base_Start_IT+0xb0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d018      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x6c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dca:	d013      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x6c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e3c <HAL_TIM_Base_Start_IT+0xb4>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00e      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x6c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a19      	ldr	r2, [pc, #100]	@ (8001e40 <HAL_TIM_Base_Start_IT+0xb8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d009      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x6c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_TIM_Base_Start_IT+0xbc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d004      	beq.n	8001df4 <HAL_TIM_Base_Start_IT+0x6c>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a16      	ldr	r2, [pc, #88]	@ (8001e48 <HAL_TIM_Base_Start_IT+0xc0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d111      	bne.n	8001e18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b06      	cmp	r3, #6
 8001e04:	d010      	beq.n	8001e28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e16:	e007      	b.n	8001e28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40010000 	.word	0x40010000
 8001e3c:	40000400 	.word	0x40000400
 8001e40:	40000800 	.word	0x40000800
 8001e44:	40000c00 	.word	0x40000c00
 8001e48:	40014000 	.word	0x40014000

08001e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d020      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01b      	beq.n	8001eb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f06f 0202 	mvn.w	r2, #2
 8001e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8d2 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001e9c:	e005      	b.n	8001eaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f8c4 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f8d5 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d020      	beq.n	8001efc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01b      	beq.n	8001efc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f06f 0204 	mvn.w	r2, #4
 8001ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8ac 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001ee8:	e005      	b.n	8001ef6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f89e 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f8af 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d020      	beq.n	8001f48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0308 	and.w	r3, r3, #8
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01b      	beq.n	8001f48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0208 	mvn.w	r2, #8
 8001f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f886 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001f34:	e005      	b.n	8001f42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f878 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f889 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d020      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d01b      	beq.n	8001f94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0210 	mvn.w	r2, #16
 8001f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f860 	bl	8002040 <HAL_TIM_IC_CaptureCallback>
 8001f80:	e005      	b.n	8001f8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f852 	bl	800202c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f863 	bl	8002054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d007      	beq.n	8001fb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f06f 0201 	mvn.w	r2, #1
 8001fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7fe fd28 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d007      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f8e6 	bl	80021a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00c      	beq.n	8002000 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f834 	bl	8002068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f003 0320 	and.w	r3, r3, #32
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00c      	beq.n	8002024 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0220 	mvn.w	r2, #32
 800201c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f8b8 	bl	8002194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3a      	ldr	r2, [pc, #232]	@ (8002178 <TIM_Base_SetConfig+0xfc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d00f      	beq.n	80020b4 <TIM_Base_SetConfig+0x38>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800209a:	d00b      	beq.n	80020b4 <TIM_Base_SetConfig+0x38>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a37      	ldr	r2, [pc, #220]	@ (800217c <TIM_Base_SetConfig+0x100>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d007      	beq.n	80020b4 <TIM_Base_SetConfig+0x38>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4a36      	ldr	r2, [pc, #216]	@ (8002180 <TIM_Base_SetConfig+0x104>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d003      	beq.n	80020b4 <TIM_Base_SetConfig+0x38>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	4a35      	ldr	r2, [pc, #212]	@ (8002184 <TIM_Base_SetConfig+0x108>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d108      	bne.n	80020c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <TIM_Base_SetConfig+0xfc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d01b      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020d4:	d017      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a28      	ldr	r2, [pc, #160]	@ (800217c <TIM_Base_SetConfig+0x100>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a27      	ldr	r2, [pc, #156]	@ (8002180 <TIM_Base_SetConfig+0x104>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d00f      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a26      	ldr	r2, [pc, #152]	@ (8002184 <TIM_Base_SetConfig+0x108>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d00b      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a25      	ldr	r2, [pc, #148]	@ (8002188 <TIM_Base_SetConfig+0x10c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d007      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a24      	ldr	r2, [pc, #144]	@ (800218c <TIM_Base_SetConfig+0x110>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0x8a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a23      	ldr	r2, [pc, #140]	@ (8002190 <TIM_Base_SetConfig+0x114>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d108      	bne.n	8002118 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800210c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	4313      	orrs	r3, r2
 8002124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a0e      	ldr	r2, [pc, #56]	@ (8002178 <TIM_Base_SetConfig+0xfc>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d103      	bne.n	800214c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	f023 0201 	bic.w	r2, r3, #1
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
  }
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40010000 	.word	0x40010000
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00
 8002188:	40014000 	.word	0x40014000
 800218c:	40014400 	.word	0x40014400
 8002190:	40014800 	.word	0x40014800

08002194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e042      	b.n	8002254 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fc50 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2224      	movs	r2, #36	@ 0x24
 80021ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f000 f973 	bl	80024ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08a      	sub	sp, #40	@ 0x28
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	603b      	str	r3, [r7, #0]
 8002268:	4613      	mov	r3, r2
 800226a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b20      	cmp	r3, #32
 800227a:	d175      	bne.n	8002368 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d002      	beq.n	8002288 <HAL_UART_Transmit+0x2c>
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e06e      	b.n	800236a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2221      	movs	r2, #33	@ 0x21
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800229a:	f7fe fdeb 	bl	8000e74 <HAL_GetTick>
 800229e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	88fa      	ldrh	r2, [r7, #6]
 80022a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	88fa      	ldrh	r2, [r7, #6]
 80022aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022b4:	d108      	bne.n	80022c8 <HAL_UART_Transmit+0x6c>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	e003      	b.n	80022d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022d0:	e02e      	b.n	8002330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2200      	movs	r2, #0
 80022da:	2180      	movs	r1, #128	@ 0x80
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 f848 	bl	8002372 <UART_WaitOnFlagUntilTimeout>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e03a      	b.n	800236a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10b      	bne.n	8002312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	881b      	ldrh	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	3302      	adds	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	e007      	b.n	8002322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	3301      	adds	r3, #1
 8002320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1cb      	bne.n	80022d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2200      	movs	r2, #0
 8002342:	2140      	movs	r1, #64	@ 0x40
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 f814 	bl	8002372 <UART_WaitOnFlagUntilTimeout>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	603b      	str	r3, [r7, #0]
 800237e:	4613      	mov	r3, r2
 8002380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002382:	e03b      	b.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238a:	d037      	beq.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238c:	f7fe fd72 	bl	8000e74 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	6a3a      	ldr	r2, [r7, #32]
 8002398:	429a      	cmp	r2, r3
 800239a:	d302      	bcc.n	80023a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e03a      	b.n	800241c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d023      	beq.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b80      	cmp	r3, #128	@ 0x80
 80023b8:	d020      	beq.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b40      	cmp	r3, #64	@ 0x40
 80023be:	d01d      	beq.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d116      	bne.n	80023fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f81d 	bl	8002424 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2208      	movs	r2, #8
 80023ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e00f      	b.n	800241c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	4013      	ands	r3, r2
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	bf0c      	ite	eq
 800240c:	2301      	moveq	r3, #1
 800240e:	2300      	movne	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	429a      	cmp	r2, r3
 8002418:	d0b4      	beq.n	8002384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002424:	b480      	push	{r7}
 8002426:	b095      	sub	sp, #84	@ 0x54
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	330c      	adds	r3, #12
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002436:	e853 3f00 	ldrex	r3, [r3]
 800243a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800244c:	643a      	str	r2, [r7, #64]	@ 0x40
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800245a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e5      	bne.n	800242c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	3314      	adds	r3, #20
 8002466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	e853 3f00 	ldrex	r3, [r3]
 800246e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f023 0301 	bic.w	r3, r3, #1
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3314      	adds	r3, #20
 800247e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002488:	e841 2300 	strex	r3, r2, [r1]
 800248c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e5      	bne.n	8002460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002498:	2b01      	cmp	r3, #1
 800249a:	d119      	bne.n	80024d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	330c      	adds	r3, #12
 80024a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	e853 3f00 	ldrex	r3, [r3]
 80024aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f023 0310 	bic.w	r3, r3, #16
 80024b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024bc:	61ba      	str	r2, [r7, #24]
 80024be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024c0:	6979      	ldr	r1, [r7, #20]
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	e841 2300 	strex	r3, r2, [r1]
 80024c8:	613b      	str	r3, [r7, #16]
   return(result);
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1e5      	bne.n	800249c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024de:	bf00      	nop
 80024e0:	3754      	adds	r7, #84	@ 0x54
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024f0:	b0c0      	sub	sp, #256	@ 0x100
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	ea40 0301 	orr.w	r3, r0, r1
 8002514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	431a      	orrs	r2, r3
 8002524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	431a      	orrs	r2, r3
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002544:	f021 010c 	bic.w	r1, r1, #12
 8002548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002552:	430b      	orrs	r3, r1
 8002554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	6999      	ldr	r1, [r3, #24]
 8002568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	ea40 0301 	orr.w	r3, r0, r1
 8002572:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4b8f      	ldr	r3, [pc, #572]	@ (80027b8 <UART_SetConfig+0x2cc>)
 800257c:	429a      	cmp	r2, r3
 800257e:	d005      	beq.n	800258c <UART_SetConfig+0xa0>
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b8d      	ldr	r3, [pc, #564]	@ (80027bc <UART_SetConfig+0x2d0>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d104      	bne.n	8002596 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800258c:	f7ff fb5c 	bl	8001c48 <HAL_RCC_GetPCLK2Freq>
 8002590:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002594:	e003      	b.n	800259e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002596:	f7ff fb43 	bl	8001c20 <HAL_RCC_GetPCLK1Freq>
 800259a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800259e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025a8:	f040 810c 	bne.w	80027c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80025ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025b0:	2200      	movs	r2, #0
 80025b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80025b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80025ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	1891      	adds	r1, r2, r2
 80025c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80025c6:	415b      	adcs	r3, r3
 80025c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025ce:	4621      	mov	r1, r4
 80025d0:	eb12 0801 	adds.w	r8, r2, r1
 80025d4:	4629      	mov	r1, r5
 80025d6:	eb43 0901 	adc.w	r9, r3, r1
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ee:	4690      	mov	r8, r2
 80025f0:	4699      	mov	r9, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	eb18 0303 	adds.w	r3, r8, r3
 80025f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025fc:	462b      	mov	r3, r5
 80025fe:	eb49 0303 	adc.w	r3, r9, r3
 8002602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002612:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002616:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800261a:	460b      	mov	r3, r1
 800261c:	18db      	adds	r3, r3, r3
 800261e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002620:	4613      	mov	r3, r2
 8002622:	eb42 0303 	adc.w	r3, r2, r3
 8002626:	657b      	str	r3, [r7, #84]	@ 0x54
 8002628:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800262c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002630:	f7fd fef2 	bl	8000418 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <UART_SetConfig+0x2d4>)
 800263a:	fba3 2302 	umull	r2, r3, r3, r2
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	011c      	lsls	r4, r3, #4
 8002642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002646:	2200      	movs	r2, #0
 8002648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800264c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002650:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	1891      	adds	r1, r2, r2
 800265a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800265c:	415b      	adcs	r3, r3
 800265e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002660:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002664:	4641      	mov	r1, r8
 8002666:	eb12 0a01 	adds.w	sl, r2, r1
 800266a:	4649      	mov	r1, r9
 800266c:	eb43 0b01 	adc.w	fp, r3, r1
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800267c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002684:	4692      	mov	sl, r2
 8002686:	469b      	mov	fp, r3
 8002688:	4643      	mov	r3, r8
 800268a:	eb1a 0303 	adds.w	r3, sl, r3
 800268e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002692:	464b      	mov	r3, r9
 8002694:	eb4b 0303 	adc.w	r3, fp, r3
 8002698:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80026ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80026b0:	460b      	mov	r3, r1
 80026b2:	18db      	adds	r3, r3, r3
 80026b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80026b6:	4613      	mov	r3, r2
 80026b8:	eb42 0303 	adc.w	r3, r2, r3
 80026bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80026be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80026c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80026c6:	f7fd fea7 	bl	8000418 <__aeabi_uldivmod>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	4b3b      	ldr	r3, [pc, #236]	@ (80027c0 <UART_SetConfig+0x2d4>)
 80026d2:	fba3 2301 	umull	r2, r3, r3, r1
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2264      	movs	r2, #100	@ 0x64
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	1acb      	subs	r3, r1, r3
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026e6:	4b36      	ldr	r3, [pc, #216]	@ (80027c0 <UART_SetConfig+0x2d4>)
 80026e8:	fba3 2302 	umull	r2, r3, r3, r2
 80026ec:	095b      	lsrs	r3, r3, #5
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026f4:	441c      	add	r4, r3
 80026f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002700:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002704:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002708:	4642      	mov	r2, r8
 800270a:	464b      	mov	r3, r9
 800270c:	1891      	adds	r1, r2, r2
 800270e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002710:	415b      	adcs	r3, r3
 8002712:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002714:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002718:	4641      	mov	r1, r8
 800271a:	1851      	adds	r1, r2, r1
 800271c:	6339      	str	r1, [r7, #48]	@ 0x30
 800271e:	4649      	mov	r1, r9
 8002720:	414b      	adcs	r3, r1
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	f04f 0300 	mov.w	r3, #0
 800272c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002730:	4659      	mov	r1, fp
 8002732:	00cb      	lsls	r3, r1, #3
 8002734:	4651      	mov	r1, sl
 8002736:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800273a:	4651      	mov	r1, sl
 800273c:	00ca      	lsls	r2, r1, #3
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	4603      	mov	r3, r0
 8002744:	4642      	mov	r2, r8
 8002746:	189b      	adds	r3, r3, r2
 8002748:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800274c:	464b      	mov	r3, r9
 800274e:	460a      	mov	r2, r1
 8002750:	eb42 0303 	adc.w	r3, r2, r3
 8002754:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002764:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002768:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800276c:	460b      	mov	r3, r1
 800276e:	18db      	adds	r3, r3, r3
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002772:	4613      	mov	r3, r2
 8002774:	eb42 0303 	adc.w	r3, r2, r3
 8002778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800277a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800277e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002782:	f7fd fe49 	bl	8000418 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <UART_SetConfig+0x2d4>)
 800278c:	fba3 1302 	umull	r1, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	2164      	movs	r1, #100	@ 0x64
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	3332      	adds	r3, #50	@ 0x32
 800279e:	4a08      	ldr	r2, [pc, #32]	@ (80027c0 <UART_SetConfig+0x2d4>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	095b      	lsrs	r3, r3, #5
 80027a6:	f003 0207 	and.w	r2, r3, #7
 80027aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4422      	add	r2, r4
 80027b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80027b4:	e106      	b.n	80029c4 <UART_SetConfig+0x4d8>
 80027b6:	bf00      	nop
 80027b8:	40011000 	.word	0x40011000
 80027bc:	40011400 	.word	0x40011400
 80027c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027c8:	2200      	movs	r2, #0
 80027ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80027d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027d6:	4642      	mov	r2, r8
 80027d8:	464b      	mov	r3, r9
 80027da:	1891      	adds	r1, r2, r2
 80027dc:	6239      	str	r1, [r7, #32]
 80027de:	415b      	adcs	r3, r3
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027e6:	4641      	mov	r1, r8
 80027e8:	1854      	adds	r4, r2, r1
 80027ea:	4649      	mov	r1, r9
 80027ec:	eb43 0501 	adc.w	r5, r3, r1
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	00eb      	lsls	r3, r5, #3
 80027fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fe:	00e2      	lsls	r2, r4, #3
 8002800:	4614      	mov	r4, r2
 8002802:	461d      	mov	r5, r3
 8002804:	4643      	mov	r3, r8
 8002806:	18e3      	adds	r3, r4, r3
 8002808:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800280c:	464b      	mov	r3, r9
 800280e:	eb45 0303 	adc.w	r3, r5, r3
 8002812:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002822:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	f04f 0300 	mov.w	r3, #0
 800282e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002832:	4629      	mov	r1, r5
 8002834:	008b      	lsls	r3, r1, #2
 8002836:	4621      	mov	r1, r4
 8002838:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800283c:	4621      	mov	r1, r4
 800283e:	008a      	lsls	r2, r1, #2
 8002840:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002844:	f7fd fde8 	bl	8000418 <__aeabi_uldivmod>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4b60      	ldr	r3, [pc, #384]	@ (80029d0 <UART_SetConfig+0x4e4>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	011c      	lsls	r4, r3, #4
 8002856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800285a:	2200      	movs	r2, #0
 800285c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002860:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002864:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002868:	4642      	mov	r2, r8
 800286a:	464b      	mov	r3, r9
 800286c:	1891      	adds	r1, r2, r2
 800286e:	61b9      	str	r1, [r7, #24]
 8002870:	415b      	adcs	r3, r3
 8002872:	61fb      	str	r3, [r7, #28]
 8002874:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002878:	4641      	mov	r1, r8
 800287a:	1851      	adds	r1, r2, r1
 800287c:	6139      	str	r1, [r7, #16]
 800287e:	4649      	mov	r1, r9
 8002880:	414b      	adcs	r3, r1
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	f04f 0300 	mov.w	r3, #0
 800288c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002890:	4659      	mov	r1, fp
 8002892:	00cb      	lsls	r3, r1, #3
 8002894:	4651      	mov	r1, sl
 8002896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800289a:	4651      	mov	r1, sl
 800289c:	00ca      	lsls	r2, r1, #3
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	4603      	mov	r3, r0
 80028a4:	4642      	mov	r2, r8
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80028ac:	464b      	mov	r3, r9
 80028ae:	460a      	mov	r2, r1
 80028b0:	eb42 0303 	adc.w	r3, r2, r3
 80028b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	f04f 0300 	mov.w	r3, #0
 80028cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80028d0:	4649      	mov	r1, r9
 80028d2:	008b      	lsls	r3, r1, #2
 80028d4:	4641      	mov	r1, r8
 80028d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028da:	4641      	mov	r1, r8
 80028dc:	008a      	lsls	r2, r1, #2
 80028de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028e2:	f7fd fd99 	bl	8000418 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4611      	mov	r1, r2
 80028ec:	4b38      	ldr	r3, [pc, #224]	@ (80029d0 <UART_SetConfig+0x4e4>)
 80028ee:	fba3 2301 	umull	r2, r3, r3, r1
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2264      	movs	r2, #100	@ 0x64
 80028f6:	fb02 f303 	mul.w	r3, r2, r3
 80028fa:	1acb      	subs	r3, r1, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	@ 0x32
 8002900:	4a33      	ldr	r2, [pc, #204]	@ (80029d0 <UART_SetConfig+0x4e4>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290c:	441c      	add	r4, r3
 800290e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002912:	2200      	movs	r2, #0
 8002914:	673b      	str	r3, [r7, #112]	@ 0x70
 8002916:	677a      	str	r2, [r7, #116]	@ 0x74
 8002918:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800291c:	4642      	mov	r2, r8
 800291e:	464b      	mov	r3, r9
 8002920:	1891      	adds	r1, r2, r2
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	415b      	adcs	r3, r3
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800292c:	4641      	mov	r1, r8
 800292e:	1851      	adds	r1, r2, r1
 8002930:	6039      	str	r1, [r7, #0]
 8002932:	4649      	mov	r1, r9
 8002934:	414b      	adcs	r3, r1
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002944:	4659      	mov	r1, fp
 8002946:	00cb      	lsls	r3, r1, #3
 8002948:	4651      	mov	r1, sl
 800294a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800294e:	4651      	mov	r1, sl
 8002950:	00ca      	lsls	r2, r1, #3
 8002952:	4610      	mov	r0, r2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	4642      	mov	r2, r8
 800295a:	189b      	adds	r3, r3, r2
 800295c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800295e:	464b      	mov	r3, r9
 8002960:	460a      	mov	r2, r1
 8002962:	eb42 0303 	adc.w	r3, r2, r3
 8002966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	663b      	str	r3, [r7, #96]	@ 0x60
 8002972:	667a      	str	r2, [r7, #100]	@ 0x64
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002980:	4649      	mov	r1, r9
 8002982:	008b      	lsls	r3, r1, #2
 8002984:	4641      	mov	r1, r8
 8002986:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800298a:	4641      	mov	r1, r8
 800298c:	008a      	lsls	r2, r1, #2
 800298e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002992:	f7fd fd41 	bl	8000418 <__aeabi_uldivmod>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <UART_SetConfig+0x4e4>)
 800299c:	fba3 1302 	umull	r1, r3, r3, r2
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	2164      	movs	r1, #100	@ 0x64
 80029a4:	fb01 f303 	mul.w	r3, r1, r3
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	3332      	adds	r3, #50	@ 0x32
 80029ae:	4a08      	ldr	r2, [pc, #32]	@ (80029d0 <UART_SetConfig+0x4e4>)
 80029b0:	fba2 2303 	umull	r2, r3, r2, r3
 80029b4:	095b      	lsrs	r3, r3, #5
 80029b6:	f003 020f 	and.w	r2, r3, #15
 80029ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4422      	add	r2, r4
 80029c2:	609a      	str	r2, [r3, #8]
}
 80029c4:	bf00      	nop
 80029c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80029ca:	46bd      	mov	sp, r7
 80029cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029d0:	51eb851f 	.word	0x51eb851f

080029d4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08e      	sub	sp, #56	@ 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80029e2:	2234      	movs	r2, #52	@ 0x34
 80029e4:	2100      	movs	r1, #0
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f001 fb96 	bl	8004118 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	f023 0303 	bic.w	r3, r3, #3
 80029f2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f1a3 0208 	sub.w	r2, r3, #8
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8002a26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8002a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a30:	3b04      	subs	r3, #4
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8002a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a40:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	3b04      	subs	r3, #4
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8002a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002a5e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8002a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a66:	3304      	adds	r3, #4
 8002a68:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8002a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a70:	4a1f      	ldr	r2, [pc, #124]	@ (8002af0 <_tx_byte_pool_create+0x11c>)
 8002a72:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7e:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8002a80:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8002a82:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8002a84:	b672      	cpsid	i
#endif
    return(int_posture);
 8002a86:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	@ (8002af4 <_tx_byte_pool_create+0x120>)
 8002a8e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8002a90:	4b19      	ldr	r3, [pc, #100]	@ (8002af8 <_tx_byte_pool_create+0x124>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <_tx_byte_pool_create+0x128>)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002aaa:	e011      	b.n	8002ad0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8002aac:	4b13      	ldr	r3, [pc, #76]	@ (8002afc <_tx_byte_pool_create+0x128>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a3a      	ldr	r2, [r7, #32]
 8002ace:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <_tx_byte_pool_create+0x124>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a08      	ldr	r2, [pc, #32]	@ (8002af8 <_tx_byte_pool_create+0x124>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f383 8810 	msr	PRIMASK, r3
}
 8002ae4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3738      	adds	r7, #56	@ 0x38
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	ffffeeee 	.word	0xffffeeee
 8002af4:	42595445 	.word	0x42595445
 8002af8:	20000ee0 	.word	0x20000ee0
 8002afc:	20000edc 	.word	0x20000edc

08002b00 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8002b04:	f000 f960 	bl	8002dc8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8002b08:	f000 fd68 	bl	80035dc <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <_tx_initialize_high_level+0x58>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <_tx_initialize_high_level+0x5c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8002b18:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <_tx_initialize_high_level+0x60>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <_tx_initialize_high_level+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <_tx_initialize_high_level+0x68>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	4b10      	ldr	r3, [pc, #64]	@ (8002b6c <_tx_initialize_high_level+0x6c>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8002b30:	4b0f      	ldr	r3, [pc, #60]	@ (8002b70 <_tx_initialize_high_level+0x70>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <_tx_initialize_high_level+0x74>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <_tx_initialize_high_level+0x78>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	4b0e      	ldr	r3, [pc, #56]	@ (8002b7c <_tx_initialize_high_level+0x7c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8002b48:	4b0d      	ldr	r3, [pc, #52]	@ (8002b80 <_tx_initialize_high_level+0x80>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b84 <_tx_initialize_high_level+0x84>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
#endif
}
 8002b54:	bf00      	nop
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000eb4 	.word	0x20000eb4
 8002b5c:	20000eb8 	.word	0x20000eb8
 8002b60:	20000ebc 	.word	0x20000ebc
 8002b64:	20000ec0 	.word	0x20000ec0
 8002b68:	20000ec4 	.word	0x20000ec4
 8002b6c:	20000ec8 	.word	0x20000ec8
 8002b70:	20000ed4 	.word	0x20000ed4
 8002b74:	20000ed8 	.word	0x20000ed8
 8002b78:	20000edc 	.word	0x20000edc
 8002b7c:	20000ee0 	.word	0x20000ee0
 8002b80:	20000ecc 	.word	0x20000ecc
 8002b84:	20000ed0 	.word	0x20000ed0

08002b88 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8002b8c:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <_tx_initialize_kernel_enter+0x48>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8002b94:	d00c      	beq.n	8002bb0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <_tx_initialize_kernel_enter+0x48>)
 8002b98:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8002b9c:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8002b9e:	f7fd fb1f 	bl	80001e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8002ba2:	f7ff ffad 	bl	8002b00 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd4 <_tx_initialize_kernel_enter+0x4c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a09      	ldr	r2, [pc, #36]	@ (8002bd4 <_tx_initialize_kernel_enter+0x4c>)
 8002bae:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8002bb0:	4b07      	ldr	r3, [pc, #28]	@ (8002bd0 <_tx_initialize_kernel_enter+0x48>)
 8002bb2:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8002bb8:	4b07      	ldr	r3, [pc, #28]	@ (8002bd8 <_tx_initialize_kernel_enter+0x50>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fda3 	bl	8000708 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8002bc2:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <_tx_initialize_kernel_enter+0x48>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8002bc8:	f7fd fb4a 	bl	8000260 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	2000000c 	.word	0x2000000c
 8002bd4:	20000f84 	.word	0x20000f84
 8002bd8:	20000ee4 	.word	0x20000ee4

08002bdc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b092      	sub	sp, #72	@ 0x48
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8002bea:	2300      	movs	r3, #0
 8002bec:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8002bee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002bf0:	21ef      	movs	r1, #239	@ 0xef
 8002bf2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002bf4:	f001 fa90 	bl	8004118 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8002bf8:	22b0      	movs	r2, #176	@ 0xb0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 fa8b 	bl	8004118 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002c18:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c1e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c24:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c2a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c32:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c38:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8002c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8002c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c4c:	4413      	add	r3, r2
 8002c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c54:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8002c56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d007      	beq.n	8002c6e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8002c6c:	e006      	b.n	8002c7c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c72:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c78:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a48      	ldr	r2, [pc, #288]	@ (8002da8 <_tx_thread_create+0x1cc>)
 8002c86:	655a      	str	r2, [r3, #84]	@ 0x54
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8002c8e:	4947      	ldr	r1, [pc, #284]	@ (8002dac <_tx_thread_create+0x1d0>)
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7fd fb45 	bl	8000320 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002c96:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8002c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8002ca0:	b672      	cpsid	i
    return(int_posture);
 8002ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8002ca4:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a41      	ldr	r2, [pc, #260]	@ (8002db0 <_tx_thread_create+0x1d4>)
 8002caa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8002cac:	4b41      	ldr	r3, [pc, #260]	@ (8002db4 <_tx_thread_create+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8002cb4:	4a40      	ldr	r2, [pc, #256]	@ (8002db8 <_tx_thread_create+0x1dc>)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 8002cca:	e016      	b.n	8002cfa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <_tx_thread_create+0x1dc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002cd8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8002cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002db4 <_tx_thread_create+0x1d8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	4a2c      	ldr	r2, [pc, #176]	@ (8002db4 <_tx_thread_create+0x1d8>)
 8002d02:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002d04:	4b2d      	ldr	r3, [pc, #180]	@ (8002dbc <_tx_thread_create+0x1e0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002dbc <_tx_thread_create+0x1e0>)
 8002d0c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8002d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d129      	bne.n	8002d68 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002d14:	f3ef 8305 	mrs	r3, IPSR
 8002d18:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8002d1c:	4b28      	ldr	r3, [pc, #160]	@ (8002dc0 <_tx_thread_create+0x1e4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8002d26:	d30d      	bcc.n	8002d44 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8002d28:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <_tx_thread_create+0x1e8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d009      	beq.n	8002d48 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8002d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d38:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8002d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d42:	e001      	b.n	8002d48 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d4a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f383 8810 	msr	PRIMASK, r3
}
 8002d52:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f979 	bl	800304c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01e      	beq.n	8002d9e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8002d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d66:	e01a      	b.n	8002d9e <_tx_thread_create+0x1c2>
 8002d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f383 8810 	msr	PRIMASK, r3
}
 8002d72:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002d74:	f3ef 8310 	mrs	r3, PRIMASK
 8002d78:	61bb      	str	r3, [r7, #24]
    return(posture);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8002d7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002d7e:	b672      	cpsid	i
    return(int_posture);
 8002d80:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8002d82:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <_tx_thread_create+0x1e0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002dbc <_tx_thread_create+0x1e0>)
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8002d9a:	f000 f91d 	bl	8002fd8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3748      	adds	r7, #72	@ 0x48
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	08003521 	.word	0x08003521
 8002dac:	08002e41 	.word	0x08002e41
 8002db0:	54485244 	.word	0x54485244
 8002db4:	20000ef8 	.word	0x20000ef8
 8002db8:	20000ef4 	.word	0x20000ef4
 8002dbc:	20000f84 	.word	0x20000f84
 8002dc0:	2000000c 	.word	0x2000000c
 8002dc4:	20000ef0 	.word	0x20000ef0

08002dc8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <_tx_thread_initialize+0x50>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <_tx_thread_initialize+0x54>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8002dd8:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <_tx_thread_initialize+0x58>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8002dde:	4b11      	ldr	r3, [pc, #68]	@ (8002e24 <_tx_thread_initialize+0x5c>)
 8002de0:	2220      	movs	r2, #32
 8002de2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8002de4:	2280      	movs	r2, #128	@ 0x80
 8002de6:	2100      	movs	r1, #0
 8002de8:	480f      	ldr	r0, [pc, #60]	@ (8002e28 <_tx_thread_initialize+0x60>)
 8002dea:	f001 f995 	bl	8004118 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <_tx_thread_initialize+0x64>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8002df4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <_tx_thread_initialize+0x68>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <_tx_thread_initialize+0x6c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8002e00:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <_tx_thread_initialize+0x70>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <_tx_thread_initialize+0x74>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e3c <_tx_thread_initialize+0x74>)
 8002e10:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000eec 	.word	0x20000eec
 8002e1c:	20000ef0 	.word	0x20000ef0
 8002e20:	20000efc 	.word	0x20000efc
 8002e24:	20000f00 	.word	0x20000f00
 8002e28:	20000f04 	.word	0x20000f04
 8002e2c:	20000ef4 	.word	0x20000ef4
 8002e30:	20000ef8 	.word	0x20000ef8
 8002e34:	20000f84 	.word	0x20000f84
 8002e38:	20000f88 	.word	0x20000f88
 8002e3c:	20000f8c 	.word	0x20000f8c

08002e40 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002e46:	4b21      	ldr	r3, [pc, #132]	@ (8002ecc <_tx_thread_shell_entry+0x8c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e54:	4610      	mov	r0, r2
 8002e56:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8002e58:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <_tx_thread_shell_entry+0x90>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <_tx_thread_shell_entry+0x90>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69f8      	ldr	r0, [r7, #28]
 8002e66:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002e68:	f3ef 8310 	mrs	r3, PRIMASK
 8002e6c:	607b      	str	r3, [r7, #4]
    return(posture);
 8002e6e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8002e70:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8002e72:	b672      	cpsid	i
    return(int_posture);
 8002e74:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8002e76:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	2201      	movs	r2, #1
 8002e82:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2200      	movs	r2, #0
 8002e88:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8002e8a:	4b12      	ldr	r3, [pc, #72]	@ (8002ed4 <_tx_thread_shell_entry+0x94>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	4a10      	ldr	r2, [pc, #64]	@ (8002ed4 <_tx_thread_shell_entry+0x94>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f383 8810 	msr	PRIMASK, r3
}
 8002e9e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8002ea0:	f3ef 8314 	mrs	r3, CONTROL
 8002ea4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8002ea6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f383 8814 	msr	CONTROL, r3
}
 8002ebc:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8002ebe:	69f8      	ldr	r0, [r7, #28]
 8002ec0:	f000 f9c4 	bl	800324c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8002ec4:	bf00      	nop
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000eec 	.word	0x20000eec
 8002ed0:	20000f88 	.word	0x20000f88
 8002ed4:	20000f84 	.word	0x20000f84

08002ed8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08e      	sub	sp, #56	@ 0x38
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8002ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8002ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8002eea:	b672      	cpsid	i
    return(int_posture);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8002eee:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8002ef0:	4b35      	ldr	r3, [pc, #212]	@ (8002fc8 <_tx_thread_sleep+0xf0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d108      	bne.n	8002f0e <_tx_thread_sleep+0x36>
 8002efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f383 8810 	msr	PRIMASK, r3
}
 8002f06:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002f08:	2313      	movs	r3, #19
 8002f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f0c:	e056      	b.n	8002fbc <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8002f0e:	f3ef 8305 	mrs	r3, IPSR
 8002f12:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8002f14:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8002f16:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <_tx_thread_sleep+0xf4>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <_tx_thread_sleep+0x5a>
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002f2c:	2313      	movs	r3, #19
 8002f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f30:	e044      	b.n	8002fbc <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	4a26      	ldr	r2, [pc, #152]	@ (8002fd0 <_tx_thread_sleep+0xf8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d108      	bne.n	8002f4c <_tx_thread_sleep+0x74>
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f383 8810 	msr	PRIMASK, r3
}
 8002f44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8002f46:	2313      	movs	r3, #19
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f4a:	e037      	b.n	8002fbc <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d108      	bne.n	8002f64 <_tx_thread_sleep+0x8c>
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f62:	e02b      	b.n	8002fbc <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <_tx_thread_sleep+0xfc>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d008      	beq.n	8002f7e <_tx_thread_sleep+0xa6>
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f383 8810 	msr	PRIMASK, r3
}
 8002f76:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8002f78:	2313      	movs	r3, #19
 8002f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7c:	e01e      	b.n	8002fbc <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	2204      	movs	r2, #4
 8002f82:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	2201      	movs	r2, #1
 8002f88:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8002f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8002f98:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <_tx_thread_sleep+0xfc>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd4 <_tx_thread_sleep+0xfc>)
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	f383 8810 	msr	PRIMASK, r3
}
 8002fac:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8002fae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fb0:	f000 f94c 	bl	800324c <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8002fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3738      	adds	r7, #56	@ 0x38
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000eec 	.word	0x20000eec
 8002fcc:	2000000c 	.word	0x2000000c
 8002fd0:	20001034 	.word	0x20001034
 8002fd4:	20000f84 	.word	0x20000f84

08002fd8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	@ 0x24
 8002fdc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8002fde:	4b17      	ldr	r3, [pc, #92]	@ (800303c <_tx_thread_system_preempt_check+0x64>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d121      	bne.n	800302e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <_tx_thread_system_preempt_check+0x68>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	@ (8003044 <_tx_thread_system_preempt_check+0x6c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d017      	beq.n	800302e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <_tx_thread_system_preempt_check+0x70>)
 8003000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003004:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003006:	f3ef 8305 	mrs	r3, IPSR
 800300a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800300c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003018:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800301a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800301c:	b662      	cpsie	i
}
 800301e:	bf00      	nop
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800302c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800302e:	bf00      	nop
 8003030:	3724      	adds	r7, #36	@ 0x24
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	20000f84 	.word	0x20000f84
 8003040:	20000eec 	.word	0x20000eec
 8003044:	20000ef0 	.word	0x20000ef0
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b096      	sub	sp, #88	@ 0x58
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 800305a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 800305c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800305e:	b672      	cpsid	i
    return(int_posture);
 8003060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003062:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	334c      	adds	r3, #76	@ 0x4c
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fb91 	bl	8003798 <_tx_timer_system_deactivate>
 8003076:	e002      	b.n	800307e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800307e:	4b6c      	ldr	r3, [pc, #432]	@ (8003230 <_tx_thread_system_resume+0x1e4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3b01      	subs	r3, #1
 8003084:	4a6a      	ldr	r2, [pc, #424]	@ (8003230 <_tx_thread_system_resume+0x1e4>)
 8003086:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 8083 	bne.w	8003198 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8097 	beq.w	80031ca <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d172      	bne.n	800318a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80030b0:	4a60      	ldr	r2, [pc, #384]	@ (8003234 <_tx_thread_system_resume+0x1e8>)
 80030b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 80030ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d154      	bne.n	800316a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80030c0:	495c      	ldr	r1, [pc, #368]	@ (8003234 <_tx_thread_system_resume+0x1e8>)
 80030c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80030d6:	2201      	movs	r2, #1
 80030d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80030e0:	4b55      	ldr	r3, [pc, #340]	@ (8003238 <_tx_thread_system_resume+0x1ec>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030e6:	4313      	orrs	r3, r2
 80030e8:	4a53      	ldr	r2, [pc, #332]	@ (8003238 <_tx_thread_system_resume+0x1ec>)
 80030ea:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80030ec:	4b53      	ldr	r3, [pc, #332]	@ (800323c <_tx_thread_system_resume+0x1f0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d269      	bcs.n	80031ca <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80030f6:	4a51      	ldr	r2, [pc, #324]	@ (800323c <_tx_thread_system_resume+0x1f0>)
 80030f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030fa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80030fc:	4b50      	ldr	r3, [pc, #320]	@ (8003240 <_tx_thread_system_resume+0x1f4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8003102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003108:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <_tx_thread_system_resume+0x1f4>)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	e05c      	b.n	80031ca <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8003110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003114:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003116:	429a      	cmp	r2, r3
 8003118:	d257      	bcs.n	80031ca <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800311a:	4a49      	ldr	r2, [pc, #292]	@ (8003240 <_tx_thread_system_resume+0x1f4>)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	f383 8810 	msr	PRIMASK, r3
}
 800312a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800312c:	4b40      	ldr	r3, [pc, #256]	@ (8003230 <_tx_thread_system_resume+0x1e4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8003132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d174      	bne.n	8003222 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003138:	4b42      	ldr	r3, [pc, #264]	@ (8003244 <_tx_thread_system_resume+0x1f8>)
 800313a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800313e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003140:	f3ef 8305 	mrs	r3, IPSR
 8003144:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10c      	bne.n	8003166 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800314c:	f3ef 8310 	mrs	r3, PRIMASK
 8003150:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8003154:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003156:	b662      	cpsie	i
}
 8003158:	bf00      	nop
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	bf00      	nop
}
 8003166:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8003168:	e05b      	b.n	8003222 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800316a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800316c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8003176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003180:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003186:	621a      	str	r2, [r3, #32]
 8003188:	e01f      	b.n	80031ca <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2203      	movs	r2, #3
 8003194:	631a      	str	r2, [r3, #48]	@ 0x30
 8003196:	e018      	b.n	80031ca <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319c:	2b01      	cmp	r3, #1
 800319e:	d014      	beq.n	80031ca <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d010      	beq.n	80031ca <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d106      	bne.n	80031be <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80031bc:	e005      	b.n	80031ca <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <_tx_thread_system_resume+0x1fc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80031dc:	4b18      	ldr	r3, [pc, #96]	@ (8003240 <_tx_thread_system_resume+0x1f4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d020      	beq.n	8003228 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80031e6:	4b12      	ldr	r3, [pc, #72]	@ (8003230 <_tx_thread_system_resume+0x1e4>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80031ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d11a      	bne.n	8003228 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80031f2:	4b14      	ldr	r3, [pc, #80]	@ (8003244 <_tx_thread_system_resume+0x1f8>)
 80031f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80031fa:	f3ef 8305 	mrs	r3, IPSR
 80031fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003200:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10f      	bne.n	8003226 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003206:	f3ef 8310 	mrs	r3, PRIMASK
 800320a:	613b      	str	r3, [r7, #16]
    return(posture);
 800320c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800320e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003210:	b662      	cpsie	i
}
 8003212:	bf00      	nop
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f383 8810 	msr	PRIMASK, r3
}
 800321e:	bf00      	nop
}
 8003220:	e001      	b.n	8003226 <_tx_thread_system_resume+0x1da>
                                return;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <_tx_thread_system_resume+0x1dc>
 8003226:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8003228:	3758      	adds	r7, #88	@ 0x58
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000f84 	.word	0x20000f84
 8003234:	20000f04 	.word	0x20000f04
 8003238:	20000efc 	.word	0x20000efc
 800323c:	20000f00 	.word	0x20000f00
 8003240:	20000ef0 	.word	0x20000ef0
 8003244:	e000ed04 	.word	0xe000ed04
 8003248:	20000eec 	.word	0x20000eec

0800324c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b09e      	sub	sp, #120	@ 0x78
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003254:	4b81      	ldr	r3, [pc, #516]	@ (800345c <_tx_thread_system_suspend+0x210>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8003260:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8003262:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8003264:	b672      	cpsid	i
    return(int_posture);
 8003266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003268:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800326e:	429a      	cmp	r2, r3
 8003270:	d112      	bne.n	8003298 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003276:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8003278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800327e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d004      	beq.n	8003290 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	334c      	adds	r3, #76	@ 0x4c
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fa22 	bl	80036d4 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	4a72      	ldr	r2, [pc, #456]	@ (8003460 <_tx_thread_system_suspend+0x214>)
 8003296:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003298:	4b72      	ldr	r3, [pc, #456]	@ (8003464 <_tx_thread_system_suspend+0x218>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	4a71      	ldr	r2, [pc, #452]	@ (8003464 <_tx_thread_system_suspend+0x218>)
 80032a0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	f040 80a6 	bne.w	80033f8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b6:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80032be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d015      	beq.n	80032f2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ca:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80032cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80032d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032d6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80032d8:	4a63      	ldr	r2, [pc, #396]	@ (8003468 <_tx_thread_system_suspend+0x21c>)
 80032da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d157      	bne.n	8003396 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80032e6:	4960      	ldr	r1, [pc, #384]	@ (8003468 <_tx_thread_system_suspend+0x21c>)
 80032e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80032f0:	e051      	b.n	8003396 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80032f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003468 <_tx_thread_system_suspend+0x21c>)
 80032f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032f6:	2100      	movs	r1, #0
 80032f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80032fc:	2201      	movs	r2, #1
 80032fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8003306:	4b59      	ldr	r3, [pc, #356]	@ (800346c <_tx_thread_system_suspend+0x220>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800330c:	43db      	mvns	r3, r3
 800330e:	4013      	ands	r3, r2
 8003310:	4a56      	ldr	r2, [pc, #344]	@ (800346c <_tx_thread_system_suspend+0x220>)
 8003312:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8003314:	2300      	movs	r3, #0
 8003316:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8003318:	4b54      	ldr	r3, [pc, #336]	@ (800346c <_tx_thread_system_suspend+0x220>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800331e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003320:	2b00      	cmp	r3, #0
 8003322:	d12b      	bne.n	800337c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003324:	4b52      	ldr	r3, [pc, #328]	@ (8003470 <_tx_thread_system_suspend+0x224>)
 8003326:	2220      	movs	r2, #32
 8003328:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800332a:	4b52      	ldr	r3, [pc, #328]	@ (8003474 <_tx_thread_system_suspend+0x228>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003332:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003336:	f383 8810 	msr	PRIMASK, r3
}
 800333a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800333c:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <_tx_thread_system_suspend+0x218>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8003342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003344:	2b00      	cmp	r3, #0
 8003346:	f040 8081 	bne.w	800344c <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800334a:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <_tx_thread_system_suspend+0x22c>)
 800334c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003350:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003352:	f3ef 8305 	mrs	r3, IPSR
 8003356:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8003358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800335e:	f3ef 8310 	mrs	r3, PRIMASK
 8003362:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8003364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8003366:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003368:	b662      	cpsie	i
}
 800336a:	bf00      	nop
 800336c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800336e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	bf00      	nop
}
 8003378:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800337a:	e067      	b.n	800344c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800337c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003384:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003386:	fab3 f383 	clz	r3, r3
 800338a:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800338c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800338e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003390:	4413      	add	r3, r2
 8003392:	4a37      	ldr	r2, [pc, #220]	@ (8003470 <_tx_thread_system_suspend+0x224>)
 8003394:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003396:	4b37      	ldr	r3, [pc, #220]	@ (8003474 <_tx_thread_system_suspend+0x228>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	429a      	cmp	r2, r3
 800339e:	d12b      	bne.n	80033f8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80033a0:	4b33      	ldr	r3, [pc, #204]	@ (8003470 <_tx_thread_system_suspend+0x224>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a30      	ldr	r2, [pc, #192]	@ (8003468 <_tx_thread_system_suspend+0x21c>)
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	4a32      	ldr	r2, [pc, #200]	@ (8003474 <_tx_thread_system_suspend+0x228>)
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80033ba:	4b2a      	ldr	r3, [pc, #168]	@ (8003464 <_tx_thread_system_suspend+0x218>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d144      	bne.n	8003450 <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80033c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003478 <_tx_thread_system_suspend+0x22c>)
 80033c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80033ce:	f3ef 8305 	mrs	r3, IPSR
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 80033d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10c      	bne.n	80033f4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033da:	f3ef 8310 	mrs	r3, PRIMASK
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80033e4:	b662      	cpsie	i
}
 80033e6:	bf00      	nop
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f383 8810 	msr	PRIMASK, r3
}
 80033f2:	bf00      	nop
}
 80033f4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80033f6:	e02b      	b.n	8003450 <_tx_thread_system_suspend+0x204>
 80033f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003404:	4b1b      	ldr	r3, [pc, #108]	@ (8003474 <_tx_thread_system_suspend+0x228>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800340a:	429a      	cmp	r2, r3
 800340c:	d022      	beq.n	8003454 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <_tx_thread_system_suspend+0x218>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8003414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003416:	2b00      	cmp	r3, #0
 8003418:	d11c      	bne.n	8003454 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800341a:	4b17      	ldr	r3, [pc, #92]	@ (8003478 <_tx_thread_system_suspend+0x22c>)
 800341c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003420:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003422:	f3ef 8305 	mrs	r3, IPSR
 8003426:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003428:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800342e:	f3ef 8310 	mrs	r3, PRIMASK
 8003432:	617b      	str	r3, [r7, #20]
    return(posture);
 8003434:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8003436:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003438:	b662      	cpsie	i
}
 800343a:	bf00      	nop
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f383 8810 	msr	PRIMASK, r3
}
 8003446:	bf00      	nop
}
 8003448:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800344a:	e003      	b.n	8003454 <_tx_thread_system_suspend+0x208>
                return;
 800344c:	bf00      	nop
 800344e:	e002      	b.n	8003456 <_tx_thread_system_suspend+0x20a>
            return;
 8003450:	bf00      	nop
 8003452:	e000      	b.n	8003456 <_tx_thread_system_suspend+0x20a>
    return;
 8003454:	bf00      	nop
}
 8003456:	3778      	adds	r7, #120	@ 0x78
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000eec 	.word	0x20000eec
 8003460:	200014f0 	.word	0x200014f0
 8003464:	20000f84 	.word	0x20000f84
 8003468:	20000f04 	.word	0x20000f04
 800346c:	20000efc 	.word	0x20000efc
 8003470:	20000f00 	.word	0x20000f00
 8003474:	20000ef0 	.word	0x20000ef0
 8003478:	e000ed04 	.word	0xe000ed04

0800347c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003482:	4b21      	ldr	r3, [pc, #132]	@ (8003508 <_tx_thread_time_slice+0x8c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003488:	f3ef 8310 	mrs	r3, PRIMASK
 800348c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800348e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8003490:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003492:	b672      	cpsid	i
    return(int_posture);
 8003494:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8003496:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003498:	4b1c      	ldr	r3, [pc, #112]	@ (800350c <_tx_thread_time_slice+0x90>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d024      	beq.n	80034ee <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d120      	bne.n	80034ee <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4a15      	ldr	r2, [pc, #84]	@ (8003510 <_tx_thread_time_slice+0x94>)
 80034ba:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d013      	beq.n	80034ee <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d10d      	bne.n	80034ee <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	6a12      	ldr	r2, [r2, #32]
 80034da:	490e      	ldr	r1, [pc, #56]	@ (8003514 <_tx_thread_time_slice+0x98>)
 80034dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80034e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <_tx_thread_time_slice+0x9c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a0b      	ldr	r2, [pc, #44]	@ (8003514 <_tx_thread_time_slice+0x98>)
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	4a0c      	ldr	r2, [pc, #48]	@ (800351c <_tx_thread_time_slice+0xa0>)
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f383 8810 	msr	PRIMASK, r3
}
 80034f8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000eec 	.word	0x20000eec
 800350c:	20000f94 	.word	0x20000f94
 8003510:	200014f0 	.word	0x200014f0
 8003514:	20000f04 	.word	0x20000f04
 8003518:	20000f00 	.word	0x20000f00
 800351c:	20000ef0 	.word	0x20000ef0

08003520 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08a      	sub	sp, #40	@ 0x28
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800352c:	f3ef 8310 	mrs	r3, PRIMASK
 8003530:	617b      	str	r3, [r7, #20]
    return(posture);
 8003532:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003534:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003536:	b672      	cpsid	i
    return(int_posture);
 8003538:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800353a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	2b04      	cmp	r3, #4
 8003542:	d10e      	bne.n	8003562 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8003544:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <_tx_thread_timeout+0x74>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3301      	adds	r3, #1
 800354a:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <_tx_thread_timeout+0x74>)
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800355a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800355c:	f7ff fd76 	bl	800304c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003560:	e013      	b.n	800358a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003566:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	69b9      	ldr	r1, [r7, #24]
 8003586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003588:	4798      	blx	r3
}
 800358a:	bf00      	nop
 800358c:	3728      	adds	r7, #40	@ 0x28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	20000f84 	.word	0x20000f84

08003598 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800359e:	f3ef 8310 	mrs	r3, PRIMASK
 80035a2:	607b      	str	r3, [r7, #4]
    return(posture);
 80035a4:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80035a6:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80035a8:	b672      	cpsid	i
    return(int_posture);
 80035aa:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80035ac:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <_tx_timer_expiration_process+0x3c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3301      	adds	r3, #1
 80035b4:	4a07      	ldr	r2, [pc, #28]	@ (80035d4 <_tx_timer_expiration_process+0x3c>)
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80035c4:	4804      	ldr	r0, [pc, #16]	@ (80035d8 <_tx_timer_expiration_process+0x40>)
 80035c6:	f7ff fd41 	bl	800304c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000f84 	.word	0x20000f84
 80035d8:	20001034 	.word	0x20001034

080035dc <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b089      	sub	sp, #36	@ 0x24
 80035e0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80035e2:	4b28      	ldr	r3, [pc, #160]	@ (8003684 <_tx_timer_initialize+0xa8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80035e8:	4b27      	ldr	r3, [pc, #156]	@ (8003688 <_tx_timer_initialize+0xac>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 80035ee:	4b27      	ldr	r3, [pc, #156]	@ (800368c <_tx_timer_initialize+0xb0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 80035f4:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <_tx_timer_initialize+0xb4>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 80035fa:	4b26      	ldr	r3, [pc, #152]	@ (8003694 <_tx_timer_initialize+0xb8>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003600:	2280      	movs	r2, #128	@ 0x80
 8003602:	2100      	movs	r1, #0
 8003604:	4824      	ldr	r0, [pc, #144]	@ (8003698 <_tx_timer_initialize+0xbc>)
 8003606:	f000 fd87 	bl	8004118 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800360a:	4b24      	ldr	r3, [pc, #144]	@ (800369c <_tx_timer_initialize+0xc0>)
 800360c:	4a22      	ldr	r2, [pc, #136]	@ (8003698 <_tx_timer_initialize+0xbc>)
 800360e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003610:	4b23      	ldr	r3, [pc, #140]	@ (80036a0 <_tx_timer_initialize+0xc4>)
 8003612:	4a21      	ldr	r2, [pc, #132]	@ (8003698 <_tx_timer_initialize+0xbc>)
 8003614:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8003616:	4b23      	ldr	r3, [pc, #140]	@ (80036a4 <_tx_timer_initialize+0xc8>)
 8003618:	4a23      	ldr	r2, [pc, #140]	@ (80036a8 <_tx_timer_initialize+0xcc>)
 800361a:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800361c:	4b21      	ldr	r3, [pc, #132]	@ (80036a4 <_tx_timer_initialize+0xc8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3304      	adds	r3, #4
 8003622:	4a20      	ldr	r2, [pc, #128]	@ (80036a4 <_tx_timer_initialize+0xc8>)
 8003624:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <_tx_timer_initialize+0xd0>)
 8003628:	4a21      	ldr	r2, [pc, #132]	@ (80036b0 <_tx_timer_initialize+0xd4>)
 800362a:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800362c:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <_tx_timer_initialize+0xd8>)
 800362e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003632:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8003634:	4b20      	ldr	r3, [pc, #128]	@ (80036b8 <_tx_timer_initialize+0xdc>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800363a:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <_tx_timer_initialize+0xd0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a1d      	ldr	r2, [pc, #116]	@ (80036b4 <_tx_timer_initialize+0xd8>)
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	491d      	ldr	r1, [pc, #116]	@ (80036b8 <_tx_timer_initialize+0xdc>)
 8003644:	6809      	ldr	r1, [r1, #0]
 8003646:	481c      	ldr	r0, [pc, #112]	@ (80036b8 <_tx_timer_initialize+0xdc>)
 8003648:	6800      	ldr	r0, [r0, #0]
 800364a:	2400      	movs	r4, #0
 800364c:	9405      	str	r4, [sp, #20]
 800364e:	2400      	movs	r4, #0
 8003650:	9404      	str	r4, [sp, #16]
 8003652:	9003      	str	r0, [sp, #12]
 8003654:	9102      	str	r1, [sp, #8]
 8003656:	9201      	str	r2, [sp, #4]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	4b18      	ldr	r3, [pc, #96]	@ (80036bc <_tx_timer_initialize+0xe0>)
 800365c:	4a18      	ldr	r2, [pc, #96]	@ (80036c0 <_tx_timer_initialize+0xe4>)
 800365e:	4919      	ldr	r1, [pc, #100]	@ (80036c4 <_tx_timer_initialize+0xe8>)
 8003660:	4819      	ldr	r0, [pc, #100]	@ (80036c8 <_tx_timer_initialize+0xec>)
 8003662:	f7ff fabb 	bl	8002bdc <_tx_thread_create>
 8003666:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800366e:	4b17      	ldr	r3, [pc, #92]	@ (80036cc <_tx_timer_initialize+0xf0>)
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8003674:	4b16      	ldr	r3, [pc, #88]	@ (80036d0 <_tx_timer_initialize+0xf4>)
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	20000f90 	.word	0x20000f90
 8003688:	200014f0 	.word	0x200014f0
 800368c:	20000f94 	.word	0x20000f94
 8003690:	20001024 	.word	0x20001024
 8003694:	20001030 	.word	0x20001030
 8003698:	20000f98 	.word	0x20000f98
 800369c:	20001018 	.word	0x20001018
 80036a0:	20001020 	.word	0x20001020
 80036a4:	2000101c 	.word	0x2000101c
 80036a8:	20001014 	.word	0x20001014
 80036ac:	200010e4 	.word	0x200010e4
 80036b0:	200010f0 	.word	0x200010f0
 80036b4:	200010e8 	.word	0x200010e8
 80036b8:	200010ec 	.word	0x200010ec
 80036bc:	4154494d 	.word	0x4154494d
 80036c0:	08003809 	.word	0x08003809
 80036c4:	080046d4 	.word	0x080046d4
 80036c8:	20001034 	.word	0x20001034
 80036cc:	20001028 	.word	0x20001028
 80036d0:	2000102c 	.word	0x2000102c

080036d4 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b089      	sub	sp, #36	@ 0x24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d04a      	beq.n	800377e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d046      	beq.n	800377e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d142      	bne.n	800377e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d902      	bls.n	8003704 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80036fe:	231f      	movs	r3, #31
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e002      	b.n	800370a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	3b01      	subs	r3, #1
 8003708:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800370a:	4b20      	ldr	r3, [pc, #128]	@ (800378c <_tx_timer_system_activate+0xb8>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8003716:	4b1e      	ldr	r3, [pc, #120]	@ (8003790 <_tx_timer_system_activate+0xbc>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	429a      	cmp	r2, r3
 800371e:	d30b      	bcc.n	8003738 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8003720:	4b1b      	ldr	r3, [pc, #108]	@ (8003790 <_tx_timer_system_activate+0xbc>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	109b      	asrs	r3, r3, #2
 800372a:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <_tx_timer_system_activate+0xc0>)
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d109      	bne.n	8003754 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	e011      	b.n	8003778 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69fa      	ldr	r2, [r7, #28]
 800377c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800377e:	bf00      	nop
 8003780:	3724      	adds	r7, #36	@ 0x24
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20001020 	.word	0x20001020
 8003790:	2000101c 	.word	0x2000101c
 8003794:	20001018 	.word	0x20001018

08003798 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d026      	beq.n	80037fa <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d108      	bne.n	80037cc <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d117      	bne.n	80037f4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e013      	b.n	80037f4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d105      	bne.n	80037f4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	619a      	str	r2, [r3, #24]
    }
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b098      	sub	sp, #96	@ 0x60
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8003810:	2300      	movs	r3, #0
 8003812:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a73      	ldr	r2, [pc, #460]	@ (80039e4 <_tx_timer_thread_entry+0x1dc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	f040 80de 	bne.w	80039da <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800381e:	f3ef 8310 	mrs	r3, PRIMASK
 8003822:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8003824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8003826:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8003828:	b672      	cpsid	i
    return(int_posture);
 800382a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800382c:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800382e:	4b6e      	ldr	r3, [pc, #440]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f107 020c 	add.w	r2, r7, #12
 8003842:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8003844:	4b68      	ldr	r3, [pc, #416]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800384c:	4b66      	ldr	r3, [pc, #408]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3304      	adds	r3, #4
 8003852:	4a65      	ldr	r2, [pc, #404]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 8003854:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8003856:	4b64      	ldr	r3, [pc, #400]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b64      	ldr	r3, [pc, #400]	@ (80039ec <_tx_timer_thread_entry+0x1e4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d103      	bne.n	800386a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8003862:	4b63      	ldr	r3, [pc, #396]	@ (80039f0 <_tx_timer_thread_entry+0x1e8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a60      	ldr	r2, [pc, #384]	@ (80039e8 <_tx_timer_thread_entry+0x1e0>)
 8003868:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800386a:	4b62      	ldr	r3, [pc, #392]	@ (80039f4 <_tx_timer_thread_entry+0x1ec>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003872:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	f383 8810 	msr	PRIMASK, r3
}
 800387a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800387c:	f3ef 8310 	mrs	r3, PRIMASK
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8003882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8003884:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8003886:	b672      	cpsid	i
    return(int_posture);
 8003888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800388a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800388c:	e07f      	b.n	800398e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800389c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800389e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d102      	bne.n	80038aa <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e00e      	b.n	80038c8 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80038aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80038b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80038b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038ba:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80038bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038be:	f107 020c 	add.w	r2, r7, #12
 80038c2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80038c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80038c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	d911      	bls.n	80038f4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80038d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80038d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038da:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80038e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038e2:	f107 0208 	add.w	r2, r7, #8
 80038e6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80038e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80038ec:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80038ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	e01a      	b.n	800392a <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80038f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80038fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003906:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8003908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d009      	beq.n	8003924 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8003910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003912:	f107 0208 	add.w	r2, r7, #8
 8003916:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8003918:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800391c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800391e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003920:	60bb      	str	r3, [r7, #8]
 8003922:	e002      	b.n	800392a <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8003924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003926:	2200      	movs	r2, #0
 8003928:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800392a:	4a33      	ldr	r2, [pc, #204]	@ (80039f8 <_tx_timer_thread_entry+0x1f0>)
 800392c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003936:	f383 8810 	msr	PRIMASK, r3
}
 800393a:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800393c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8003942:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003944:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8003946:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003948:	f3ef 8310 	mrs	r3, PRIMASK
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003952:	b672      	cpsid	i
    return(int_posture);
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8003956:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8003958:	4b27      	ldr	r3, [pc, #156]	@ (80039f8 <_tx_timer_thread_entry+0x1f0>)
 800395a:	2200      	movs	r2, #0
 800395c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003962:	429a      	cmp	r2, r3
 8003964:	d105      	bne.n	8003972 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8003966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003968:	2200      	movs	r2, #0
 800396a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800396c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800396e:	f7ff feb1 	bl	80036d4 <_tx_timer_system_activate>
 8003972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003974:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f383 8810 	msr	PRIMASK, r3
}
 800397c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800397e:	f3ef 8310 	mrs	r3, PRIMASK
 8003982:	623b      	str	r3, [r7, #32]
    return(posture);
 8003984:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003986:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003988:	b672      	cpsid	i
    return(int_posture);
 800398a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800398c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	f47f af7c 	bne.w	800388e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8003996:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <_tx_timer_thread_entry+0x1ec>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <_tx_timer_thread_entry+0x1f4>)
 80039a0:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80039a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a4:	2203      	movs	r2, #3
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80039a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039aa:	2201      	movs	r2, #1
 80039ac:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80039ae:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <_tx_timer_thread_entry+0x1f8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <_tx_timer_thread_entry+0x1f8>)
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80039c4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80039c6:	f7ff fc41 	bl	800324c <_tx_thread_system_suspend>
 80039ca:	e728      	b.n	800381e <_tx_timer_thread_entry+0x16>
 80039cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ce:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	bf00      	nop
            TX_DISABLE
 80039d8:	e721      	b.n	800381e <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80039da:	bf00      	nop
 80039dc:	3760      	adds	r7, #96	@ 0x60
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	4154494d 	.word	0x4154494d
 80039e8:	20001020 	.word	0x20001020
 80039ec:	2000101c 	.word	0x2000101c
 80039f0:	20001018 	.word	0x20001018
 80039f4:	20001024 	.word	0x20001024
 80039f8:	20001030 	.word	0x20001030
 80039fc:	20001034 	.word	0x20001034
 8003a00:	20000f84 	.word	0x20000f84

08003a04 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b092      	sub	sp, #72	@ 0x48
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
 8003a10:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003a12:	2300      	movs	r3, #0
 8003a14:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d102      	bne.n	8003a22 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a20:	e075      	b.n	8003b0e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8003a22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a24:	2b34      	cmp	r3, #52	@ 0x34
 8003a26:	d002      	beq.n	8003a2e <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a2c:	e06f      	b.n	8003b0e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8003a36:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a38:	b672      	cpsid	i
    return(int_posture);
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <_txe_byte_pool_create+0x128>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3301      	adds	r3, #1
 8003a44:	4a39      	ldr	r2, [pc, #228]	@ (8003b2c <_txe_byte_pool_create+0x128>)
 8003a46:	6013      	str	r3, [r2, #0]
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8003a54:	4b36      	ldr	r3, [pc, #216]	@ (8003b30 <_txe_byte_pool_create+0x12c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a5e:	e009      	b.n	8003a74 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d00b      	beq.n	8003a80 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8003a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a70:	3301      	adds	r3, #1
 8003a72:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a74:	4b2f      	ldr	r3, [pc, #188]	@ (8003b34 <_txe_byte_pool_create+0x130>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d3f0      	bcc.n	8003a60 <_txe_byte_pool_create+0x5c>
 8003a7e:	e000      	b.n	8003a82 <_txe_byte_pool_create+0x7e>
                break;
 8003a80:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a82:	f3ef 8310 	mrs	r3, PRIMASK
 8003a86:	623b      	str	r3, [r7, #32]
    return(posture);
 8003a88:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8003a8a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a8c:	b672      	cpsid	i
    return(int_posture);
 8003a8e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003a90:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003a92:	4b26      	ldr	r3, [pc, #152]	@ (8003b2c <_txe_byte_pool_create+0x128>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	4a24      	ldr	r2, [pc, #144]	@ (8003b2c <_txe_byte_pool_create+0x128>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003aa8:	f7ff fa96 	bl	8002fd8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d102      	bne.n	8003aba <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab8:	e029      	b.n	8003b0e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac4:	e023      	b.n	8003b0e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b63      	cmp	r3, #99	@ 0x63
 8003aca:	d802      	bhi.n	8003ad2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8003acc:	2305      	movs	r3, #5
 8003ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ad0:	e01d      	b.n	8003b0e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <_txe_byte_pool_create+0x134>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8003ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ada:	4a18      	ldr	r2, [pc, #96]	@ (8003b3c <_txe_byte_pool_create+0x138>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d101      	bne.n	8003ae4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003ae0:	2313      	movs	r3, #19
 8003ae2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003ae4:	f3ef 8305 	mrs	r3, IPSR
 8003ae8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003aea:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003aec:	4b14      	ldr	r3, [pc, #80]	@ (8003b40 <_txe_byte_pool_create+0x13c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003af6:	f3ef 8305 	mrs	r3, IPSR
 8003afa:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003afc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003afe:	4b10      	ldr	r3, [pc, #64]	@ (8003b40 <_txe_byte_pool_create+0x13c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8003b08:	d201      	bcs.n	8003b0e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003b0a:	2313      	movs	r3, #19
 8003b0c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003b0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7fe ff5a 	bl	80029d4 <_tx_byte_pool_create>
 8003b20:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8003b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3748      	adds	r7, #72	@ 0x48
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000f84 	.word	0x20000f84
 8003b30:	20000edc 	.word	0x20000edc
 8003b34:	20000ee0 	.word	0x20000ee0
 8003b38:	20000eec 	.word	0x20000eec
 8003b3c:	20001034 	.word	0x20001034
 8003b40:	2000000c 	.word	0x2000000c

08003b44 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b09a      	sub	sp, #104	@ 0x68
 8003b48:	af06      	add	r7, sp, #24
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8003b52:	2300      	movs	r3, #0
 8003b54:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d102      	bne.n	8003b62 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003b5c:	230e      	movs	r3, #14
 8003b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b60:	e0bb      	b.n	8003cda <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8003b62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b64:	2bb0      	cmp	r3, #176	@ 0xb0
 8003b66:	d002      	beq.n	8003b6e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8003b68:	230e      	movs	r3, #14
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b6c:	e0b5      	b.n	8003cda <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8003b76:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8003b78:	b672      	cpsid	i
    return(int_posture);
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8003b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8003b7e:	4b64      	ldr	r3, [pc, #400]	@ (8003d10 <_txe_thread_create+0x1cc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a62      	ldr	r2, [pc, #392]	@ (8003d10 <_txe_thread_create+0x1cc>)
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	f383 8810 	msr	PRIMASK, r3
}
 8003b92:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8003b98:	4b5e      	ldr	r3, [pc, #376]	@ (8003d14 <_txe_thread_create+0x1d0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8003b9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba0:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8003ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ba8:	4413      	add	r3, r2
 8003baa:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8003bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bae:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb4:	e02b      	b.n	8003c0e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d101      	bne.n	8003bc2 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8003bc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d028      	beq.n	8003c1a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8003bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d308      	bcc.n	8003be4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8003bd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d203      	bcs.n	8003be4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003be0:	2301      	movs	r3, #1
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8003be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d308      	bcc.n	8003c00 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8003bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d203      	bcs.n	8003c00 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8003c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c06:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8003c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c0e:	4b42      	ldr	r3, [pc, #264]	@ (8003d18 <_txe_thread_create+0x1d4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d3ce      	bcc.n	8003bb6 <_txe_thread_create+0x72>
 8003c18:	e000      	b.n	8003c1c <_txe_thread_create+0xd8>
                break;
 8003c1a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c20:	61fb      	str	r3, [r7, #28]
    return(posture);
 8003c22:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8003c24:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c26:	b672      	cpsid	i
    return(int_posture);
 8003c28:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8003c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8003c2c:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <_txe_thread_create+0x1cc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	4a37      	ldr	r2, [pc, #220]	@ (8003d10 <_txe_thread_create+0x1cc>)
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c38:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f383 8810 	msr	PRIMASK, r3
}
 8003c40:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003c42:	f7ff f9c9 	bl	8002fd8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d102      	bne.n	8003c54 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8003c4e:	230e      	movs	r3, #14
 8003c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c52:	e042      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8003c54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c5e:	e03c      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8003c66:	2303      	movs	r3, #3
 8003c68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6a:	e036      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8003c6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003c70:	d802      	bhi.n	8003c78 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8003c72:	2305      	movs	r3, #5
 8003c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c76:	e030      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8003c78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c7a:	2b1f      	cmp	r3, #31
 8003c7c:	d902      	bls.n	8003c84 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8003c7e:	230f      	movs	r3, #15
 8003c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c82:	e02a      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8003c84:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d902      	bls.n	8003c92 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8003c8c:	2318      	movs	r3, #24
 8003c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c90:	e023      	b.n	8003cda <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8003c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d902      	bls.n	8003c9e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8003c98:	2310      	movs	r3, #16
 8003c9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c9c:	e01d      	b.n	8003cda <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8003c9e:	4b1f      	ldr	r3, [pc, #124]	@ (8003d1c <_txe_thread_create+0x1d8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8003d20 <_txe_thread_create+0x1dc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d101      	bne.n	8003cb0 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8003cac:	2313      	movs	r3, #19
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003cb0:	f3ef 8305 	mrs	r3, IPSR
 8003cb4:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003cb6:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8003cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <_txe_thread_create+0x1e0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00b      	beq.n	8003cda <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003cc2:	f3ef 8305 	mrs	r3, IPSR
 8003cc6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8003cc8:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8003cca:	4b16      	ldr	r3, [pc, #88]	@ (8003d24 <_txe_thread_create+0x1e0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8003cd4:	d201      	bcs.n	8003cda <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8003cd6:	2313      	movs	r3, #19
 8003cd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8003cda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d112      	bne.n	8003d06 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8003ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ce2:	9305      	str	r3, [sp, #20]
 8003ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ce6:	9304      	str	r3, [sp, #16]
 8003ce8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cea:	9303      	str	r3, [sp, #12]
 8003cec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cee:	9302      	str	r3, [sp, #8]
 8003cf0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cf2:	9301      	str	r3, [sp, #4]
 8003cf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf6:	9300      	str	r3, [sp, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7fe ff6c 	bl	8002bdc <_tx_thread_create>
 8003d04:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8003d06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3750      	adds	r7, #80	@ 0x50
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20000f84 	.word	0x20000f84
 8003d14:	20000ef4 	.word	0x20000ef4
 8003d18:	20000ef8 	.word	0x20000ef8
 8003d1c:	20000eec 	.word	0x20000eec
 8003d20:	20001034 	.word	0x20001034
 8003d24:	2000000c 	.word	0x2000000c

08003d28 <std>:
 8003d28:	2300      	movs	r3, #0
 8003d2a:	b510      	push	{r4, lr}
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	e9c0 3300 	strd	r3, r3, [r0]
 8003d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d36:	6083      	str	r3, [r0, #8]
 8003d38:	8181      	strh	r1, [r0, #12]
 8003d3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d3c:	81c2      	strh	r2, [r0, #14]
 8003d3e:	6183      	str	r3, [r0, #24]
 8003d40:	4619      	mov	r1, r3
 8003d42:	2208      	movs	r2, #8
 8003d44:	305c      	adds	r0, #92	@ 0x5c
 8003d46:	f000 f9e7 	bl	8004118 <memset>
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <std+0x58>)
 8003d4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <std+0x5c>)
 8003d50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <std+0x60>)
 8003d54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <std+0x64>)
 8003d58:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d90 <std+0x68>)
 8003d5c:	6224      	str	r4, [r4, #32]
 8003d5e:	429c      	cmp	r4, r3
 8003d60:	d006      	beq.n	8003d70 <std+0x48>
 8003d62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003d66:	4294      	cmp	r4, r2
 8003d68:	d002      	beq.n	8003d70 <std+0x48>
 8003d6a:	33d0      	adds	r3, #208	@ 0xd0
 8003d6c:	429c      	cmp	r4, r3
 8003d6e:	d105      	bne.n	8003d7c <std+0x54>
 8003d70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d78:	f000 ba46 	b.w	8004208 <__retarget_lock_init_recursive>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	bf00      	nop
 8003d80:	08003f69 	.word	0x08003f69
 8003d84:	08003f8b 	.word	0x08003f8b
 8003d88:	08003fc3 	.word	0x08003fc3
 8003d8c:	08003fe7 	.word	0x08003fe7
 8003d90:	200014f4 	.word	0x200014f4

08003d94 <stdio_exit_handler>:
 8003d94:	4a02      	ldr	r2, [pc, #8]	@ (8003da0 <stdio_exit_handler+0xc>)
 8003d96:	4903      	ldr	r1, [pc, #12]	@ (8003da4 <stdio_exit_handler+0x10>)
 8003d98:	4803      	ldr	r0, [pc, #12]	@ (8003da8 <stdio_exit_handler+0x14>)
 8003d9a:	f000 b869 	b.w	8003e70 <_fwalk_sglue>
 8003d9e:	bf00      	nop
 8003da0:	20000010 	.word	0x20000010
 8003da4:	08004509 	.word	0x08004509
 8003da8:	20000020 	.word	0x20000020

08003dac <cleanup_stdio>:
 8003dac:	6841      	ldr	r1, [r0, #4]
 8003dae:	4b0c      	ldr	r3, [pc, #48]	@ (8003de0 <cleanup_stdio+0x34>)
 8003db0:	4299      	cmp	r1, r3
 8003db2:	b510      	push	{r4, lr}
 8003db4:	4604      	mov	r4, r0
 8003db6:	d001      	beq.n	8003dbc <cleanup_stdio+0x10>
 8003db8:	f000 fba6 	bl	8004508 <_fflush_r>
 8003dbc:	68a1      	ldr	r1, [r4, #8]
 8003dbe:	4b09      	ldr	r3, [pc, #36]	@ (8003de4 <cleanup_stdio+0x38>)
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	d002      	beq.n	8003dca <cleanup_stdio+0x1e>
 8003dc4:	4620      	mov	r0, r4
 8003dc6:	f000 fb9f 	bl	8004508 <_fflush_r>
 8003dca:	68e1      	ldr	r1, [r4, #12]
 8003dcc:	4b06      	ldr	r3, [pc, #24]	@ (8003de8 <cleanup_stdio+0x3c>)
 8003dce:	4299      	cmp	r1, r3
 8003dd0:	d004      	beq.n	8003ddc <cleanup_stdio+0x30>
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dd8:	f000 bb96 	b.w	8004508 <_fflush_r>
 8003ddc:	bd10      	pop	{r4, pc}
 8003dde:	bf00      	nop
 8003de0:	200014f4 	.word	0x200014f4
 8003de4:	2000155c 	.word	0x2000155c
 8003de8:	200015c4 	.word	0x200015c4

08003dec <global_stdio_init.part.0>:
 8003dec:	b510      	push	{r4, lr}
 8003dee:	4b0b      	ldr	r3, [pc, #44]	@ (8003e1c <global_stdio_init.part.0+0x30>)
 8003df0:	4c0b      	ldr	r4, [pc, #44]	@ (8003e20 <global_stdio_init.part.0+0x34>)
 8003df2:	4a0c      	ldr	r2, [pc, #48]	@ (8003e24 <global_stdio_init.part.0+0x38>)
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	4620      	mov	r0, r4
 8003df8:	2200      	movs	r2, #0
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	f7ff ff94 	bl	8003d28 <std>
 8003e00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003e04:	2201      	movs	r2, #1
 8003e06:	2109      	movs	r1, #9
 8003e08:	f7ff ff8e 	bl	8003d28 <std>
 8003e0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003e10:	2202      	movs	r2, #2
 8003e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e16:	2112      	movs	r1, #18
 8003e18:	f7ff bf86 	b.w	8003d28 <std>
 8003e1c:	2000162c 	.word	0x2000162c
 8003e20:	200014f4 	.word	0x200014f4
 8003e24:	08003d95 	.word	0x08003d95

08003e28 <__sfp_lock_acquire>:
 8003e28:	4801      	ldr	r0, [pc, #4]	@ (8003e30 <__sfp_lock_acquire+0x8>)
 8003e2a:	f000 b9ee 	b.w	800420a <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20001635 	.word	0x20001635

08003e34 <__sfp_lock_release>:
 8003e34:	4801      	ldr	r0, [pc, #4]	@ (8003e3c <__sfp_lock_release+0x8>)
 8003e36:	f000 b9e9 	b.w	800420c <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20001635 	.word	0x20001635

08003e40 <__sinit>:
 8003e40:	b510      	push	{r4, lr}
 8003e42:	4604      	mov	r4, r0
 8003e44:	f7ff fff0 	bl	8003e28 <__sfp_lock_acquire>
 8003e48:	6a23      	ldr	r3, [r4, #32]
 8003e4a:	b11b      	cbz	r3, 8003e54 <__sinit+0x14>
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f7ff bff0 	b.w	8003e34 <__sfp_lock_release>
 8003e54:	4b04      	ldr	r3, [pc, #16]	@ (8003e68 <__sinit+0x28>)
 8003e56:	6223      	str	r3, [r4, #32]
 8003e58:	4b04      	ldr	r3, [pc, #16]	@ (8003e6c <__sinit+0x2c>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f5      	bne.n	8003e4c <__sinit+0xc>
 8003e60:	f7ff ffc4 	bl	8003dec <global_stdio_init.part.0>
 8003e64:	e7f2      	b.n	8003e4c <__sinit+0xc>
 8003e66:	bf00      	nop
 8003e68:	08003dad 	.word	0x08003dad
 8003e6c:	2000162c 	.word	0x2000162c

08003e70 <_fwalk_sglue>:
 8003e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e74:	4607      	mov	r7, r0
 8003e76:	4688      	mov	r8, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	2600      	movs	r6, #0
 8003e7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e80:	f1b9 0901 	subs.w	r9, r9, #1
 8003e84:	d505      	bpl.n	8003e92 <_fwalk_sglue+0x22>
 8003e86:	6824      	ldr	r4, [r4, #0]
 8003e88:	2c00      	cmp	r4, #0
 8003e8a:	d1f7      	bne.n	8003e7c <_fwalk_sglue+0xc>
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e92:	89ab      	ldrh	r3, [r5, #12]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d907      	bls.n	8003ea8 <_fwalk_sglue+0x38>
 8003e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	d003      	beq.n	8003ea8 <_fwalk_sglue+0x38>
 8003ea0:	4629      	mov	r1, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	47c0      	blx	r8
 8003ea6:	4306      	orrs	r6, r0
 8003ea8:	3568      	adds	r5, #104	@ 0x68
 8003eaa:	e7e9      	b.n	8003e80 <_fwalk_sglue+0x10>

08003eac <_puts_r>:
 8003eac:	6a03      	ldr	r3, [r0, #32]
 8003eae:	b570      	push	{r4, r5, r6, lr}
 8003eb0:	6884      	ldr	r4, [r0, #8]
 8003eb2:	4605      	mov	r5, r0
 8003eb4:	460e      	mov	r6, r1
 8003eb6:	b90b      	cbnz	r3, 8003ebc <_puts_r+0x10>
 8003eb8:	f7ff ffc2 	bl	8003e40 <__sinit>
 8003ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ebe:	07db      	lsls	r3, r3, #31
 8003ec0:	d405      	bmi.n	8003ece <_puts_r+0x22>
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	0598      	lsls	r0, r3, #22
 8003ec6:	d402      	bmi.n	8003ece <_puts_r+0x22>
 8003ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eca:	f000 f99e 	bl	800420a <__retarget_lock_acquire_recursive>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	0719      	lsls	r1, r3, #28
 8003ed2:	d502      	bpl.n	8003eda <_puts_r+0x2e>
 8003ed4:	6923      	ldr	r3, [r4, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d135      	bne.n	8003f46 <_puts_r+0x9a>
 8003eda:	4621      	mov	r1, r4
 8003edc:	4628      	mov	r0, r5
 8003ede:	f000 f8c5 	bl	800406c <__swsetup_r>
 8003ee2:	b380      	cbz	r0, 8003f46 <_puts_r+0x9a>
 8003ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8003ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eea:	07da      	lsls	r2, r3, #31
 8003eec:	d405      	bmi.n	8003efa <_puts_r+0x4e>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	059b      	lsls	r3, r3, #22
 8003ef2:	d402      	bmi.n	8003efa <_puts_r+0x4e>
 8003ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ef6:	f000 f989 	bl	800420c <__retarget_lock_release_recursive>
 8003efa:	4628      	mov	r0, r5
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da04      	bge.n	8003f0c <_puts_r+0x60>
 8003f02:	69a2      	ldr	r2, [r4, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	dc17      	bgt.n	8003f38 <_puts_r+0x8c>
 8003f08:	290a      	cmp	r1, #10
 8003f0a:	d015      	beq.n	8003f38 <_puts_r+0x8c>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	7019      	strb	r1, [r3, #0]
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	60a3      	str	r3, [r4, #8]
 8003f1e:	2900      	cmp	r1, #0
 8003f20:	d1ed      	bne.n	8003efe <_puts_r+0x52>
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	da11      	bge.n	8003f4a <_puts_r+0x9e>
 8003f26:	4622      	mov	r2, r4
 8003f28:	210a      	movs	r1, #10
 8003f2a:	4628      	mov	r0, r5
 8003f2c:	f000 f85f 	bl	8003fee <__swbuf_r>
 8003f30:	3001      	adds	r0, #1
 8003f32:	d0d7      	beq.n	8003ee4 <_puts_r+0x38>
 8003f34:	250a      	movs	r5, #10
 8003f36:	e7d7      	b.n	8003ee8 <_puts_r+0x3c>
 8003f38:	4622      	mov	r2, r4
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 f857 	bl	8003fee <__swbuf_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d1e7      	bne.n	8003f14 <_puts_r+0x68>
 8003f44:	e7ce      	b.n	8003ee4 <_puts_r+0x38>
 8003f46:	3e01      	subs	r6, #1
 8003f48:	e7e4      	b.n	8003f14 <_puts_r+0x68>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	6022      	str	r2, [r4, #0]
 8003f50:	220a      	movs	r2, #10
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e7ee      	b.n	8003f34 <_puts_r+0x88>
	...

08003f58 <puts>:
 8003f58:	4b02      	ldr	r3, [pc, #8]	@ (8003f64 <puts+0xc>)
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	f7ff bfa5 	b.w	8003eac <_puts_r>
 8003f62:	bf00      	nop
 8003f64:	2000001c 	.word	0x2000001c

08003f68 <__sread>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f70:	f000 f8fc 	bl	800416c <_read_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	bfab      	itete	ge
 8003f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8003f7c:	181b      	addge	r3, r3, r0
 8003f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003f82:	bfac      	ite	ge
 8003f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003f86:	81a3      	strhlt	r3, [r4, #12]
 8003f88:	bd10      	pop	{r4, pc}

08003f8a <__swrite>:
 8003f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f8e:	461f      	mov	r7, r3
 8003f90:	898b      	ldrh	r3, [r1, #12]
 8003f92:	05db      	lsls	r3, r3, #23
 8003f94:	4605      	mov	r5, r0
 8003f96:	460c      	mov	r4, r1
 8003f98:	4616      	mov	r6, r2
 8003f9a:	d505      	bpl.n	8003fa8 <__swrite+0x1e>
 8003f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f000 f8d0 	bl	8004148 <_lseek_r>
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb2:	81a3      	strh	r3, [r4, #12]
 8003fb4:	4632      	mov	r2, r6
 8003fb6:	463b      	mov	r3, r7
 8003fb8:	4628      	mov	r0, r5
 8003fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	f000 b8e7 	b.w	8004190 <_write_r>

08003fc2 <__sseek>:
 8003fc2:	b510      	push	{r4, lr}
 8003fc4:	460c      	mov	r4, r1
 8003fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fca:	f000 f8bd 	bl	8004148 <_lseek_r>
 8003fce:	1c43      	adds	r3, r0, #1
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	bf15      	itete	ne
 8003fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003fde:	81a3      	strheq	r3, [r4, #12]
 8003fe0:	bf18      	it	ne
 8003fe2:	81a3      	strhne	r3, [r4, #12]
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <__sclose>:
 8003fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fea:	f000 b89d 	b.w	8004128 <_close_r>

08003fee <__swbuf_r>:
 8003fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff0:	460e      	mov	r6, r1
 8003ff2:	4614      	mov	r4, r2
 8003ff4:	4605      	mov	r5, r0
 8003ff6:	b118      	cbz	r0, 8004000 <__swbuf_r+0x12>
 8003ff8:	6a03      	ldr	r3, [r0, #32]
 8003ffa:	b90b      	cbnz	r3, 8004000 <__swbuf_r+0x12>
 8003ffc:	f7ff ff20 	bl	8003e40 <__sinit>
 8004000:	69a3      	ldr	r3, [r4, #24]
 8004002:	60a3      	str	r3, [r4, #8]
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	071a      	lsls	r2, r3, #28
 8004008:	d501      	bpl.n	800400e <__swbuf_r+0x20>
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	b943      	cbnz	r3, 8004020 <__swbuf_r+0x32>
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f82b 	bl	800406c <__swsetup_r>
 8004016:	b118      	cbz	r0, 8004020 <__swbuf_r+0x32>
 8004018:	f04f 37ff 	mov.w	r7, #4294967295
 800401c:	4638      	mov	r0, r7
 800401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	6922      	ldr	r2, [r4, #16]
 8004024:	1a98      	subs	r0, r3, r2
 8004026:	6963      	ldr	r3, [r4, #20]
 8004028:	b2f6      	uxtb	r6, r6
 800402a:	4283      	cmp	r3, r0
 800402c:	4637      	mov	r7, r6
 800402e:	dc05      	bgt.n	800403c <__swbuf_r+0x4e>
 8004030:	4621      	mov	r1, r4
 8004032:	4628      	mov	r0, r5
 8004034:	f000 fa68 	bl	8004508 <_fflush_r>
 8004038:	2800      	cmp	r0, #0
 800403a:	d1ed      	bne.n	8004018 <__swbuf_r+0x2a>
 800403c:	68a3      	ldr	r3, [r4, #8]
 800403e:	3b01      	subs	r3, #1
 8004040:	60a3      	str	r3, [r4, #8]
 8004042:	6823      	ldr	r3, [r4, #0]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	6022      	str	r2, [r4, #0]
 8004048:	701e      	strb	r6, [r3, #0]
 800404a:	6962      	ldr	r2, [r4, #20]
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	429a      	cmp	r2, r3
 8004050:	d004      	beq.n	800405c <__swbuf_r+0x6e>
 8004052:	89a3      	ldrh	r3, [r4, #12]
 8004054:	07db      	lsls	r3, r3, #31
 8004056:	d5e1      	bpl.n	800401c <__swbuf_r+0x2e>
 8004058:	2e0a      	cmp	r6, #10
 800405a:	d1df      	bne.n	800401c <__swbuf_r+0x2e>
 800405c:	4621      	mov	r1, r4
 800405e:	4628      	mov	r0, r5
 8004060:	f000 fa52 	bl	8004508 <_fflush_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	d0d9      	beq.n	800401c <__swbuf_r+0x2e>
 8004068:	e7d6      	b.n	8004018 <__swbuf_r+0x2a>
	...

0800406c <__swsetup_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4b29      	ldr	r3, [pc, #164]	@ (8004114 <__swsetup_r+0xa8>)
 8004070:	4605      	mov	r5, r0
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	460c      	mov	r4, r1
 8004076:	b118      	cbz	r0, 8004080 <__swsetup_r+0x14>
 8004078:	6a03      	ldr	r3, [r0, #32]
 800407a:	b90b      	cbnz	r3, 8004080 <__swsetup_r+0x14>
 800407c:	f7ff fee0 	bl	8003e40 <__sinit>
 8004080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d422      	bmi.n	80040ce <__swsetup_r+0x62>
 8004088:	06da      	lsls	r2, r3, #27
 800408a:	d407      	bmi.n	800409c <__swsetup_r+0x30>
 800408c:	2209      	movs	r2, #9
 800408e:	602a      	str	r2, [r5, #0]
 8004090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004094:	81a3      	strh	r3, [r4, #12]
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	e033      	b.n	8004104 <__swsetup_r+0x98>
 800409c:	0758      	lsls	r0, r3, #29
 800409e:	d512      	bpl.n	80040c6 <__swsetup_r+0x5a>
 80040a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040a2:	b141      	cbz	r1, 80040b6 <__swsetup_r+0x4a>
 80040a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040a8:	4299      	cmp	r1, r3
 80040aa:	d002      	beq.n	80040b2 <__swsetup_r+0x46>
 80040ac:	4628      	mov	r0, r5
 80040ae:	f000 f8af 	bl	8004210 <_free_r>
 80040b2:	2300      	movs	r3, #0
 80040b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040b6:	89a3      	ldrh	r3, [r4, #12]
 80040b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	2300      	movs	r3, #0
 80040c0:	6063      	str	r3, [r4, #4]
 80040c2:	6923      	ldr	r3, [r4, #16]
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	81a3      	strh	r3, [r4, #12]
 80040ce:	6923      	ldr	r3, [r4, #16]
 80040d0:	b94b      	cbnz	r3, 80040e6 <__swsetup_r+0x7a>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040dc:	d003      	beq.n	80040e6 <__swsetup_r+0x7a>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 fa5f 	bl	80045a4 <__smakebuf_r>
 80040e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ea:	f013 0201 	ands.w	r2, r3, #1
 80040ee:	d00a      	beq.n	8004106 <__swsetup_r+0x9a>
 80040f0:	2200      	movs	r2, #0
 80040f2:	60a2      	str	r2, [r4, #8]
 80040f4:	6962      	ldr	r2, [r4, #20]
 80040f6:	4252      	negs	r2, r2
 80040f8:	61a2      	str	r2, [r4, #24]
 80040fa:	6922      	ldr	r2, [r4, #16]
 80040fc:	b942      	cbnz	r2, 8004110 <__swsetup_r+0xa4>
 80040fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004102:	d1c5      	bne.n	8004090 <__swsetup_r+0x24>
 8004104:	bd38      	pop	{r3, r4, r5, pc}
 8004106:	0799      	lsls	r1, r3, #30
 8004108:	bf58      	it	pl
 800410a:	6962      	ldrpl	r2, [r4, #20]
 800410c:	60a2      	str	r2, [r4, #8]
 800410e:	e7f4      	b.n	80040fa <__swsetup_r+0x8e>
 8004110:	2000      	movs	r0, #0
 8004112:	e7f7      	b.n	8004104 <__swsetup_r+0x98>
 8004114:	2000001c 	.word	0x2000001c

08004118 <memset>:
 8004118:	4402      	add	r2, r0
 800411a:	4603      	mov	r3, r0
 800411c:	4293      	cmp	r3, r2
 800411e:	d100      	bne.n	8004122 <memset+0xa>
 8004120:	4770      	bx	lr
 8004122:	f803 1b01 	strb.w	r1, [r3], #1
 8004126:	e7f9      	b.n	800411c <memset+0x4>

08004128 <_close_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d06      	ldr	r5, [pc, #24]	@ (8004144 <_close_r+0x1c>)
 800412c:	2300      	movs	r3, #0
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7fc fdc1 	bl	8000cba <_close>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_close_r+0x1a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_close_r+0x1a>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20001630 	.word	0x20001630

08004148 <_lseek_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	4d07      	ldr	r5, [pc, #28]	@ (8004168 <_lseek_r+0x20>)
 800414c:	4604      	mov	r4, r0
 800414e:	4608      	mov	r0, r1
 8004150:	4611      	mov	r1, r2
 8004152:	2200      	movs	r2, #0
 8004154:	602a      	str	r2, [r5, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	f7fc fdd6 	bl	8000d08 <_lseek>
 800415c:	1c43      	adds	r3, r0, #1
 800415e:	d102      	bne.n	8004166 <_lseek_r+0x1e>
 8004160:	682b      	ldr	r3, [r5, #0]
 8004162:	b103      	cbz	r3, 8004166 <_lseek_r+0x1e>
 8004164:	6023      	str	r3, [r4, #0]
 8004166:	bd38      	pop	{r3, r4, r5, pc}
 8004168:	20001630 	.word	0x20001630

0800416c <_read_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	4d07      	ldr	r5, [pc, #28]	@ (800418c <_read_r+0x20>)
 8004170:	4604      	mov	r4, r0
 8004172:	4608      	mov	r0, r1
 8004174:	4611      	mov	r1, r2
 8004176:	2200      	movs	r2, #0
 8004178:	602a      	str	r2, [r5, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f7fc fd64 	bl	8000c48 <_read>
 8004180:	1c43      	adds	r3, r0, #1
 8004182:	d102      	bne.n	800418a <_read_r+0x1e>
 8004184:	682b      	ldr	r3, [r5, #0]
 8004186:	b103      	cbz	r3, 800418a <_read_r+0x1e>
 8004188:	6023      	str	r3, [r4, #0]
 800418a:	bd38      	pop	{r3, r4, r5, pc}
 800418c:	20001630 	.word	0x20001630

08004190 <_write_r>:
 8004190:	b538      	push	{r3, r4, r5, lr}
 8004192:	4d07      	ldr	r5, [pc, #28]	@ (80041b0 <_write_r+0x20>)
 8004194:	4604      	mov	r4, r0
 8004196:	4608      	mov	r0, r1
 8004198:	4611      	mov	r1, r2
 800419a:	2200      	movs	r2, #0
 800419c:	602a      	str	r2, [r5, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	f7fc fd6f 	bl	8000c82 <_write>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_write_r+0x1e>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_write_r+0x1e>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	20001630 	.word	0x20001630

080041b4 <__errno>:
 80041b4:	4b01      	ldr	r3, [pc, #4]	@ (80041bc <__errno+0x8>)
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2000001c 	.word	0x2000001c

080041c0 <__libc_init_array>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	4d0d      	ldr	r5, [pc, #52]	@ (80041f8 <__libc_init_array+0x38>)
 80041c4:	4c0d      	ldr	r4, [pc, #52]	@ (80041fc <__libc_init_array+0x3c>)
 80041c6:	1b64      	subs	r4, r4, r5
 80041c8:	10a4      	asrs	r4, r4, #2
 80041ca:	2600      	movs	r6, #0
 80041cc:	42a6      	cmp	r6, r4
 80041ce:	d109      	bne.n	80041e4 <__libc_init_array+0x24>
 80041d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004200 <__libc_init_array+0x40>)
 80041d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004204 <__libc_init_array+0x44>)
 80041d4:	f000 fa54 	bl	8004680 <_init>
 80041d8:	1b64      	subs	r4, r4, r5
 80041da:	10a4      	asrs	r4, r4, #2
 80041dc:	2600      	movs	r6, #0
 80041de:	42a6      	cmp	r6, r4
 80041e0:	d105      	bne.n	80041ee <__libc_init_array+0x2e>
 80041e2:	bd70      	pop	{r4, r5, r6, pc}
 80041e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e8:	4798      	blx	r3
 80041ea:	3601      	adds	r6, #1
 80041ec:	e7ee      	b.n	80041cc <__libc_init_array+0xc>
 80041ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80041f2:	4798      	blx	r3
 80041f4:	3601      	adds	r6, #1
 80041f6:	e7f2      	b.n	80041de <__libc_init_array+0x1e>
 80041f8:	08004708 	.word	0x08004708
 80041fc:	08004708 	.word	0x08004708
 8004200:	08004708 	.word	0x08004708
 8004204:	0800470c 	.word	0x0800470c

08004208 <__retarget_lock_init_recursive>:
 8004208:	4770      	bx	lr

0800420a <__retarget_lock_acquire_recursive>:
 800420a:	4770      	bx	lr

0800420c <__retarget_lock_release_recursive>:
 800420c:	4770      	bx	lr
	...

08004210 <_free_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4605      	mov	r5, r0
 8004214:	2900      	cmp	r1, #0
 8004216:	d041      	beq.n	800429c <_free_r+0x8c>
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f0c      	subs	r4, r1, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfb8      	it	lt
 8004222:	18e4      	addlt	r4, r4, r3
 8004224:	f000 f8e0 	bl	80043e8 <__malloc_lock>
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <_free_r+0x90>)
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x2c>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	4628      	mov	r0, r5
 8004234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004238:	f000 b8dc 	b.w	80043f4 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x42>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	1821      	adds	r1, r4, r0
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x1e>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x4c>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x42>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1850      	adds	r0, r2, r1
 8004260:	42a0      	cmp	r0, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x6c>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	4401      	add	r1, r0
 8004268:	1850      	adds	r0, r2, r1
 800426a:	4283      	cmp	r3, r0
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x22>
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	4408      	add	r0, r1
 8004278:	6010      	str	r0, [r2, #0]
 800427a:	e7da      	b.n	8004232 <_free_r+0x22>
 800427c:	d902      	bls.n	8004284 <_free_r+0x74>
 800427e:	230c      	movs	r3, #12
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x22>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	1821      	adds	r1, r4, r0
 8004288:	428b      	cmp	r3, r1
 800428a:	bf04      	itt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1809      	addeq	r1, r1, r0
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6054      	str	r4, [r2, #4]
 800429a:	e7ca      	b.n	8004232 <_free_r+0x22>
 800429c:	bd38      	pop	{r3, r4, r5, pc}
 800429e:	bf00      	nop
 80042a0:	2000163c 	.word	0x2000163c

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0f      	ldr	r6, [pc, #60]	@ (80042e4 <sbrk_aligned+0x40>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 f9d6 	bl	8004660 <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 f9d1 	bl	8004660 <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d103      	bne.n	80042ca <sbrk_aligned+0x26>
 80042c2:	f04f 34ff 	mov.w	r4, #4294967295
 80042c6:	4620      	mov	r0, r4
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	1cc4      	adds	r4, r0, #3
 80042cc:	f024 0403 	bic.w	r4, r4, #3
 80042d0:	42a0      	cmp	r0, r4
 80042d2:	d0f8      	beq.n	80042c6 <sbrk_aligned+0x22>
 80042d4:	1a21      	subs	r1, r4, r0
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 f9c2 	bl	8004660 <_sbrk_r>
 80042dc:	3001      	adds	r0, #1
 80042de:	d1f2      	bne.n	80042c6 <sbrk_aligned+0x22>
 80042e0:	e7ef      	b.n	80042c2 <sbrk_aligned+0x1e>
 80042e2:	bf00      	nop
 80042e4:	20001638 	.word	0x20001638

080042e8 <_malloc_r>:
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ec:	1ccd      	adds	r5, r1, #3
 80042ee:	f025 0503 	bic.w	r5, r5, #3
 80042f2:	3508      	adds	r5, #8
 80042f4:	2d0c      	cmp	r5, #12
 80042f6:	bf38      	it	cc
 80042f8:	250c      	movcc	r5, #12
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	4606      	mov	r6, r0
 80042fe:	db01      	blt.n	8004304 <_malloc_r+0x1c>
 8004300:	42a9      	cmp	r1, r5
 8004302:	d904      	bls.n	800430e <_malloc_r+0x26>
 8004304:	230c      	movs	r3, #12
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	2000      	movs	r0, #0
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043e4 <_malloc_r+0xfc>
 8004312:	f000 f869 	bl	80043e8 <__malloc_lock>
 8004316:	f8d8 3000 	ldr.w	r3, [r8]
 800431a:	461c      	mov	r4, r3
 800431c:	bb44      	cbnz	r4, 8004370 <_malloc_r+0x88>
 800431e:	4629      	mov	r1, r5
 8004320:	4630      	mov	r0, r6
 8004322:	f7ff ffbf 	bl	80042a4 <sbrk_aligned>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	4604      	mov	r4, r0
 800432a:	d158      	bne.n	80043de <_malloc_r+0xf6>
 800432c:	f8d8 4000 	ldr.w	r4, [r8]
 8004330:	4627      	mov	r7, r4
 8004332:	2f00      	cmp	r7, #0
 8004334:	d143      	bne.n	80043be <_malloc_r+0xd6>
 8004336:	2c00      	cmp	r4, #0
 8004338:	d04b      	beq.n	80043d2 <_malloc_r+0xea>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	4639      	mov	r1, r7
 800433e:	4630      	mov	r0, r6
 8004340:	eb04 0903 	add.w	r9, r4, r3
 8004344:	f000 f98c 	bl	8004660 <_sbrk_r>
 8004348:	4581      	cmp	r9, r0
 800434a:	d142      	bne.n	80043d2 <_malloc_r+0xea>
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	1a6d      	subs	r5, r5, r1
 8004350:	4629      	mov	r1, r5
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff ffa6 	bl	80042a4 <sbrk_aligned>
 8004358:	3001      	adds	r0, #1
 800435a:	d03a      	beq.n	80043d2 <_malloc_r+0xea>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	442b      	add	r3, r5
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	f8d8 3000 	ldr.w	r3, [r8]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	bb62      	cbnz	r2, 80043c4 <_malloc_r+0xdc>
 800436a:	f8c8 7000 	str.w	r7, [r8]
 800436e:	e00f      	b.n	8004390 <_malloc_r+0xa8>
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	1b52      	subs	r2, r2, r5
 8004374:	d420      	bmi.n	80043b8 <_malloc_r+0xd0>
 8004376:	2a0b      	cmp	r2, #11
 8004378:	d917      	bls.n	80043aa <_malloc_r+0xc2>
 800437a:	1961      	adds	r1, r4, r5
 800437c:	42a3      	cmp	r3, r4
 800437e:	6025      	str	r5, [r4, #0]
 8004380:	bf18      	it	ne
 8004382:	6059      	strne	r1, [r3, #4]
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	bf08      	it	eq
 8004388:	f8c8 1000 	streq.w	r1, [r8]
 800438c:	5162      	str	r2, [r4, r5]
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	4630      	mov	r0, r6
 8004392:	f000 f82f 	bl	80043f4 <__malloc_unlock>
 8004396:	f104 000b 	add.w	r0, r4, #11
 800439a:	1d23      	adds	r3, r4, #4
 800439c:	f020 0007 	bic.w	r0, r0, #7
 80043a0:	1ac2      	subs	r2, r0, r3
 80043a2:	bf1c      	itt	ne
 80043a4:	1a1b      	subne	r3, r3, r0
 80043a6:	50a3      	strne	r3, [r4, r2]
 80043a8:	e7af      	b.n	800430a <_malloc_r+0x22>
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	bf0c      	ite	eq
 80043b0:	f8c8 2000 	streq.w	r2, [r8]
 80043b4:	605a      	strne	r2, [r3, #4]
 80043b6:	e7eb      	b.n	8004390 <_malloc_r+0xa8>
 80043b8:	4623      	mov	r3, r4
 80043ba:	6864      	ldr	r4, [r4, #4]
 80043bc:	e7ae      	b.n	800431c <_malloc_r+0x34>
 80043be:	463c      	mov	r4, r7
 80043c0:	687f      	ldr	r7, [r7, #4]
 80043c2:	e7b6      	b.n	8004332 <_malloc_r+0x4a>
 80043c4:	461a      	mov	r2, r3
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	d1fb      	bne.n	80043c4 <_malloc_r+0xdc>
 80043cc:	2300      	movs	r3, #0
 80043ce:	6053      	str	r3, [r2, #4]
 80043d0:	e7de      	b.n	8004390 <_malloc_r+0xa8>
 80043d2:	230c      	movs	r3, #12
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 f80c 	bl	80043f4 <__malloc_unlock>
 80043dc:	e794      	b.n	8004308 <_malloc_r+0x20>
 80043de:	6005      	str	r5, [r0, #0]
 80043e0:	e7d6      	b.n	8004390 <_malloc_r+0xa8>
 80043e2:	bf00      	nop
 80043e4:	2000163c 	.word	0x2000163c

080043e8 <__malloc_lock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	@ (80043f0 <__malloc_lock+0x8>)
 80043ea:	f7ff bf0e 	b.w	800420a <__retarget_lock_acquire_recursive>
 80043ee:	bf00      	nop
 80043f0:	20001634 	.word	0x20001634

080043f4 <__malloc_unlock>:
 80043f4:	4801      	ldr	r0, [pc, #4]	@ (80043fc <__malloc_unlock+0x8>)
 80043f6:	f7ff bf09 	b.w	800420c <__retarget_lock_release_recursive>
 80043fa:	bf00      	nop
 80043fc:	20001634 	.word	0x20001634

08004400 <__sflush_r>:
 8004400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004408:	0716      	lsls	r6, r2, #28
 800440a:	4605      	mov	r5, r0
 800440c:	460c      	mov	r4, r1
 800440e:	d454      	bmi.n	80044ba <__sflush_r+0xba>
 8004410:	684b      	ldr	r3, [r1, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	dc02      	bgt.n	800441c <__sflush_r+0x1c>
 8004416:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	dd48      	ble.n	80044ae <__sflush_r+0xae>
 800441c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800441e:	2e00      	cmp	r6, #0
 8004420:	d045      	beq.n	80044ae <__sflush_r+0xae>
 8004422:	2300      	movs	r3, #0
 8004424:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004428:	682f      	ldr	r7, [r5, #0]
 800442a:	6a21      	ldr	r1, [r4, #32]
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	d030      	beq.n	8004492 <__sflush_r+0x92>
 8004430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	0759      	lsls	r1, r3, #29
 8004436:	d505      	bpl.n	8004444 <__sflush_r+0x44>
 8004438:	6863      	ldr	r3, [r4, #4]
 800443a:	1ad2      	subs	r2, r2, r3
 800443c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800443e:	b10b      	cbz	r3, 8004444 <__sflush_r+0x44>
 8004440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	2300      	movs	r3, #0
 8004446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004448:	6a21      	ldr	r1, [r4, #32]
 800444a:	4628      	mov	r0, r5
 800444c:	47b0      	blx	r6
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	89a3      	ldrh	r3, [r4, #12]
 8004452:	d106      	bne.n	8004462 <__sflush_r+0x62>
 8004454:	6829      	ldr	r1, [r5, #0]
 8004456:	291d      	cmp	r1, #29
 8004458:	d82b      	bhi.n	80044b2 <__sflush_r+0xb2>
 800445a:	4a2a      	ldr	r2, [pc, #168]	@ (8004504 <__sflush_r+0x104>)
 800445c:	410a      	asrs	r2, r1
 800445e:	07d6      	lsls	r6, r2, #31
 8004460:	d427      	bmi.n	80044b2 <__sflush_r+0xb2>
 8004462:	2200      	movs	r2, #0
 8004464:	6062      	str	r2, [r4, #4]
 8004466:	04d9      	lsls	r1, r3, #19
 8004468:	6922      	ldr	r2, [r4, #16]
 800446a:	6022      	str	r2, [r4, #0]
 800446c:	d504      	bpl.n	8004478 <__sflush_r+0x78>
 800446e:	1c42      	adds	r2, r0, #1
 8004470:	d101      	bne.n	8004476 <__sflush_r+0x76>
 8004472:	682b      	ldr	r3, [r5, #0]
 8004474:	b903      	cbnz	r3, 8004478 <__sflush_r+0x78>
 8004476:	6560      	str	r0, [r4, #84]	@ 0x54
 8004478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800447a:	602f      	str	r7, [r5, #0]
 800447c:	b1b9      	cbz	r1, 80044ae <__sflush_r+0xae>
 800447e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004482:	4299      	cmp	r1, r3
 8004484:	d002      	beq.n	800448c <__sflush_r+0x8c>
 8004486:	4628      	mov	r0, r5
 8004488:	f7ff fec2 	bl	8004210 <_free_r>
 800448c:	2300      	movs	r3, #0
 800448e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004490:	e00d      	b.n	80044ae <__sflush_r+0xae>
 8004492:	2301      	movs	r3, #1
 8004494:	4628      	mov	r0, r5
 8004496:	47b0      	blx	r6
 8004498:	4602      	mov	r2, r0
 800449a:	1c50      	adds	r0, r2, #1
 800449c:	d1c9      	bne.n	8004432 <__sflush_r+0x32>
 800449e:	682b      	ldr	r3, [r5, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0c6      	beq.n	8004432 <__sflush_r+0x32>
 80044a4:	2b1d      	cmp	r3, #29
 80044a6:	d001      	beq.n	80044ac <__sflush_r+0xac>
 80044a8:	2b16      	cmp	r3, #22
 80044aa:	d11e      	bne.n	80044ea <__sflush_r+0xea>
 80044ac:	602f      	str	r7, [r5, #0]
 80044ae:	2000      	movs	r0, #0
 80044b0:	e022      	b.n	80044f8 <__sflush_r+0xf8>
 80044b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044b6:	b21b      	sxth	r3, r3
 80044b8:	e01b      	b.n	80044f2 <__sflush_r+0xf2>
 80044ba:	690f      	ldr	r7, [r1, #16]
 80044bc:	2f00      	cmp	r7, #0
 80044be:	d0f6      	beq.n	80044ae <__sflush_r+0xae>
 80044c0:	0793      	lsls	r3, r2, #30
 80044c2:	680e      	ldr	r6, [r1, #0]
 80044c4:	bf08      	it	eq
 80044c6:	694b      	ldreq	r3, [r1, #20]
 80044c8:	600f      	str	r7, [r1, #0]
 80044ca:	bf18      	it	ne
 80044cc:	2300      	movne	r3, #0
 80044ce:	eba6 0807 	sub.w	r8, r6, r7
 80044d2:	608b      	str	r3, [r1, #8]
 80044d4:	f1b8 0f00 	cmp.w	r8, #0
 80044d8:	dde9      	ble.n	80044ae <__sflush_r+0xae>
 80044da:	6a21      	ldr	r1, [r4, #32]
 80044dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80044de:	4643      	mov	r3, r8
 80044e0:	463a      	mov	r2, r7
 80044e2:	4628      	mov	r0, r5
 80044e4:	47b0      	blx	r6
 80044e6:	2800      	cmp	r0, #0
 80044e8:	dc08      	bgt.n	80044fc <__sflush_r+0xfc>
 80044ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295
 80044f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044fc:	4407      	add	r7, r0
 80044fe:	eba8 0800 	sub.w	r8, r8, r0
 8004502:	e7e7      	b.n	80044d4 <__sflush_r+0xd4>
 8004504:	dfbffffe 	.word	0xdfbffffe

08004508 <_fflush_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	690b      	ldr	r3, [r1, #16]
 800450c:	4605      	mov	r5, r0
 800450e:	460c      	mov	r4, r1
 8004510:	b913      	cbnz	r3, 8004518 <_fflush_r+0x10>
 8004512:	2500      	movs	r5, #0
 8004514:	4628      	mov	r0, r5
 8004516:	bd38      	pop	{r3, r4, r5, pc}
 8004518:	b118      	cbz	r0, 8004522 <_fflush_r+0x1a>
 800451a:	6a03      	ldr	r3, [r0, #32]
 800451c:	b90b      	cbnz	r3, 8004522 <_fflush_r+0x1a>
 800451e:	f7ff fc8f 	bl	8003e40 <__sinit>
 8004522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f3      	beq.n	8004512 <_fflush_r+0xa>
 800452a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800452c:	07d0      	lsls	r0, r2, #31
 800452e:	d404      	bmi.n	800453a <_fflush_r+0x32>
 8004530:	0599      	lsls	r1, r3, #22
 8004532:	d402      	bmi.n	800453a <_fflush_r+0x32>
 8004534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004536:	f7ff fe68 	bl	800420a <__retarget_lock_acquire_recursive>
 800453a:	4628      	mov	r0, r5
 800453c:	4621      	mov	r1, r4
 800453e:	f7ff ff5f 	bl	8004400 <__sflush_r>
 8004542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004544:	07da      	lsls	r2, r3, #31
 8004546:	4605      	mov	r5, r0
 8004548:	d4e4      	bmi.n	8004514 <_fflush_r+0xc>
 800454a:	89a3      	ldrh	r3, [r4, #12]
 800454c:	059b      	lsls	r3, r3, #22
 800454e:	d4e1      	bmi.n	8004514 <_fflush_r+0xc>
 8004550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004552:	f7ff fe5b 	bl	800420c <__retarget_lock_release_recursive>
 8004556:	e7dd      	b.n	8004514 <_fflush_r+0xc>

08004558 <__swhatbuf_r>:
 8004558:	b570      	push	{r4, r5, r6, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004560:	2900      	cmp	r1, #0
 8004562:	b096      	sub	sp, #88	@ 0x58
 8004564:	4615      	mov	r5, r2
 8004566:	461e      	mov	r6, r3
 8004568:	da0d      	bge.n	8004586 <__swhatbuf_r+0x2e>
 800456a:	89a3      	ldrh	r3, [r4, #12]
 800456c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004570:	f04f 0100 	mov.w	r1, #0
 8004574:	bf14      	ite	ne
 8004576:	2340      	movne	r3, #64	@ 0x40
 8004578:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800457c:	2000      	movs	r0, #0
 800457e:	6031      	str	r1, [r6, #0]
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	b016      	add	sp, #88	@ 0x58
 8004584:	bd70      	pop	{r4, r5, r6, pc}
 8004586:	466a      	mov	r2, sp
 8004588:	f000 f848 	bl	800461c <_fstat_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	dbec      	blt.n	800456a <__swhatbuf_r+0x12>
 8004590:	9901      	ldr	r1, [sp, #4]
 8004592:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004596:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800459a:	4259      	negs	r1, r3
 800459c:	4159      	adcs	r1, r3
 800459e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045a2:	e7eb      	b.n	800457c <__swhatbuf_r+0x24>

080045a4 <__smakebuf_r>:
 80045a4:	898b      	ldrh	r3, [r1, #12]
 80045a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045a8:	079d      	lsls	r5, r3, #30
 80045aa:	4606      	mov	r6, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	d507      	bpl.n	80045c0 <__smakebuf_r+0x1c>
 80045b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	2301      	movs	r3, #1
 80045ba:	6163      	str	r3, [r4, #20]
 80045bc:	b003      	add	sp, #12
 80045be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c0:	ab01      	add	r3, sp, #4
 80045c2:	466a      	mov	r2, sp
 80045c4:	f7ff ffc8 	bl	8004558 <__swhatbuf_r>
 80045c8:	9f00      	ldr	r7, [sp, #0]
 80045ca:	4605      	mov	r5, r0
 80045cc:	4639      	mov	r1, r7
 80045ce:	4630      	mov	r0, r6
 80045d0:	f7ff fe8a 	bl	80042e8 <_malloc_r>
 80045d4:	b948      	cbnz	r0, 80045ea <__smakebuf_r+0x46>
 80045d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045da:	059a      	lsls	r2, r3, #22
 80045dc:	d4ee      	bmi.n	80045bc <__smakebuf_r+0x18>
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	f043 0302 	orr.w	r3, r3, #2
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	e7e2      	b.n	80045b0 <__smakebuf_r+0xc>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	6020      	str	r0, [r4, #0]
 80045ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f2:	81a3      	strh	r3, [r4, #12]
 80045f4:	9b01      	ldr	r3, [sp, #4]
 80045f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045fa:	b15b      	cbz	r3, 8004614 <__smakebuf_r+0x70>
 80045fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f81d 	bl	8004640 <_isatty_r>
 8004606:	b128      	cbz	r0, 8004614 <__smakebuf_r+0x70>
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	81a3      	strh	r3, [r4, #12]
 8004614:	89a3      	ldrh	r3, [r4, #12]
 8004616:	431d      	orrs	r5, r3
 8004618:	81a5      	strh	r5, [r4, #12]
 800461a:	e7cf      	b.n	80045bc <__smakebuf_r+0x18>

0800461c <_fstat_r>:
 800461c:	b538      	push	{r3, r4, r5, lr}
 800461e:	4d07      	ldr	r5, [pc, #28]	@ (800463c <_fstat_r+0x20>)
 8004620:	2300      	movs	r3, #0
 8004622:	4604      	mov	r4, r0
 8004624:	4608      	mov	r0, r1
 8004626:	4611      	mov	r1, r2
 8004628:	602b      	str	r3, [r5, #0]
 800462a:	f7fc fb52 	bl	8000cd2 <_fstat>
 800462e:	1c43      	adds	r3, r0, #1
 8004630:	d102      	bne.n	8004638 <_fstat_r+0x1c>
 8004632:	682b      	ldr	r3, [r5, #0]
 8004634:	b103      	cbz	r3, 8004638 <_fstat_r+0x1c>
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	bd38      	pop	{r3, r4, r5, pc}
 800463a:	bf00      	nop
 800463c:	20001630 	.word	0x20001630

08004640 <_isatty_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4d06      	ldr	r5, [pc, #24]	@ (800465c <_isatty_r+0x1c>)
 8004644:	2300      	movs	r3, #0
 8004646:	4604      	mov	r4, r0
 8004648:	4608      	mov	r0, r1
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	f7fc fb51 	bl	8000cf2 <_isatty>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d102      	bne.n	800465a <_isatty_r+0x1a>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	b103      	cbz	r3, 800465a <_isatty_r+0x1a>
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	bd38      	pop	{r3, r4, r5, pc}
 800465c:	20001630 	.word	0x20001630

08004660 <_sbrk_r>:
 8004660:	b538      	push	{r3, r4, r5, lr}
 8004662:	4d06      	ldr	r5, [pc, #24]	@ (800467c <_sbrk_r+0x1c>)
 8004664:	2300      	movs	r3, #0
 8004666:	4604      	mov	r4, r0
 8004668:	4608      	mov	r0, r1
 800466a:	602b      	str	r3, [r5, #0]
 800466c:	f7fc fb5a 	bl	8000d24 <_sbrk>
 8004670:	1c43      	adds	r3, r0, #1
 8004672:	d102      	bne.n	800467a <_sbrk_r+0x1a>
 8004674:	682b      	ldr	r3, [r5, #0]
 8004676:	b103      	cbz	r3, 800467a <_sbrk_r+0x1a>
 8004678:	6023      	str	r3, [r4, #0]
 800467a:	bd38      	pop	{r3, r4, r5, pc}
 800467c:	20001630 	.word	0x20001630

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	bf00      	nop
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	bf00      	nop
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr
